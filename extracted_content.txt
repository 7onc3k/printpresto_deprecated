Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\middleware.ts
==================================================
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs';

export async function middleware(req: NextRequest) {
  const res = NextResponse.next();
  const supabase = createMiddlewareClient({ req, res });
  
  const {
    data: { session },
  } = await supabase.auth.getSession();

  // Pokud se uživatel pokouší přistoupit k /employee/login, nechme ho projít
  if (req.nextUrl.pathname === '/employee/login') {
    return res;
  }

  // Pokud uživatel není přihlášený a pokouší se přistoupit k /employee/*
  if (!session && req.nextUrl.pathname.startsWith('/employee')) {
    return NextResponse.redirect(new URL('/employee/login', req.url));
  }

  // Pokud je uživatel přihlášený, zkontrolujeme, zda je zaměstnanec
  if (session && req.nextUrl.pathname.startsWith('/employee')) {
    const { data: userData } = await supabase
      .from('users')
      .select('is_employee')
      .eq('id', session.user.id)
      .single();

    if (!userData || !userData.is_employee) {
      // Pokud uživatel není zaměstnanec, přesměrujeme ho na hlavní stránku
      return NextResponse.redirect(new URL('/', req.url));
    }
  }

  return res;
}

export const config = {
  matcher: ['/employee/:path*'],
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\app\layout.tsx
==================================================
"use client";

import React from 'react';
import Link from 'next/link';
import { useStore } from '../store';
import { usePathname } from 'next/navigation';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  const { user } = useStore();
  const pathname = usePathname();
  const isDesignerPage = pathname.startsWith('/designer');

  return (
    <div className="min-h-screen flex flex-col">
      <nav className="bg-gray-800 text-white p-4">
        <div className="container mx-auto flex justify-between items-center">
          <Link href="/" className="text-xl font-bold">PrintPresto</Link>
          <div className="space-x-4">
            <Link href="/products" className="hover:text-gray-300">Produkty</Link>
            <Link href="/cart" className="hover:text-gray-300">Košík</Link>
            {user ? (
              <Link href="/profile" className="hover:text-gray-300">Profil</Link>
            ) : (
              <Link href="/login" className="hover:text-gray-300">Přihlásit se</Link>
            )}
          </div>
        </div>
      </nav>
      <main className={`flex-grow container mx-auto ${isDesignerPage ? '' : 'mt-4 p-4'}`}>
        {children}
      </main>
      <footer className="bg-gray-800 text-white p-4 mt-8">
        <div className="container mx-auto text-center">
          &copy; {new Date().getFullYear()} PrintPresto. Všechna práva vyhrazena.
        </div>
      </footer>
    </div>
  );
};

export default Layout;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\app\page.tsx
==================================================
import React from 'react';
import Link from 'next/link';

const Home: React.FC = () => {
  return (
    <div className="h-screen flex flex-col justify-center items-center">
      <h1 className="text-4xl font-bold mb-8">Vítejte na PrintPresto</h1>
      <Link href="/products" passHref>
        <button className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
          Prohlédnout produkty
        </button>
      </Link>
    </div>
  );
};

export default Home;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\app\cart\page.tsx
==================================================
import React from 'react';
import Cart from '../../features/cart/cart';

const CartPage: React.FC = () => {
  return (
    <div className="container mx-auto p-4">
      <h2 className="text-2xl font-bold mb-4">Košík</h2>
      <Cart />
    </div>
  );
};

export default CartPage;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\app\designer\[id]\page.tsx
==================================================
import React from 'react';
import { useRouter } from 'next/router';
import ProductDesignerLayout from '../../../components/products/ProductDesignerLayout';
import { useProductDesigner } from '../../../hooks/useProductDesigner';
import { ProductDesignerProps } from '../../../types/productDesigner';

const ProductDesignerPage: React.FC = () => {
  const router = useRouter();
  const productDesignerProps = useProductDesigner();

  const combinedProps: ProductDesignerProps = {
    ...productDesignerProps,
    onGoToCart: () => router.push('/cart')
  };

  return <ProductDesignerLayout {...combinedProps} />;
};

export default ProductDesignerPage;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\app\employee\dashboard\page.tsx
==================================================
"use client";

import React from 'react';
import AuthGuard from '../../../components/auth/AuthGuard';
import OrderListComponent from '../../../components/employee/OrderListComponent';
import OrderDetailsComponent from '../../../components/employee/OrderDetailsComponent';
import DesignViewerComponent from '../../../components/employee/DesignViewerComponent';
import { useOrders } from '../../../hooks/useOrders';
import { useDesign } from '../../../hooks/useDesign';
import { useEmployeeAuth } from '../../../hooks/useEmployeeAuth';

const EmployeeDashboard: React.FC = () => {
  useEmployeeAuth();
  const { orders, selectedOrder, orderItems, handleViewOrder } = useOrders();
  const { uploadedImages, selectedProductId, handleViewOrderItem } = useDesign();

  return (
    <AuthGuard>
      <div>
        <h1>Dashboard zaměstnance</h1>
        <OrderListComponent orders={orders} onViewOrder={handleViewOrder} />
        {selectedOrder && (
          <>
            <OrderDetailsComponent order={selectedOrder} orderItems={orderItems} />
            <DesignViewerComponent
              productId={selectedProductId}
              uploadedImages={uploadedImages}
              onViewOrderItem={handleViewOrderItem}
            />
          </>
        )}
      </div>
    </AuthGuard>
  );
};

export default EmployeeDashboard;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\app\employee\login\page.tsx
==================================================
"use client";

import React, { useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '../../../utils/supabaseClient';

const EmployeeLogin = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) throw error;

      if (data.user) {
        const { data: userData, error: userError } = await supabase
          .from('users')
          .select('is_employee')
          .eq('id', data.user.id)
          .single();

        if (userError) throw userError;

        if (userData && userData.is_employee) {
          router.push('/employee/dashboard');
        } else {
          setError('Přístup odepřen. Nejste zaměstnanec.');
          await supabase.auth.signOut();
        }
      }
    } catch (err) {
      console.error('Error logging in:', err);
      setError('Chyba při přihlašování');
    }
  };

  return (
    <div>
      <h2>Přihlášení zaměstnance</h2>
      {error && <p>{error}</p>}
      <form onSubmit={handleLogin}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
        />
        <input
          type="password"
          placeholder="Heslo"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="submit">Přihlásit</button>
      </form>
    </div>
  );
};

export default EmployeeLogin;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\app\login\page.tsx
==================================================
"use client";

import React, { useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useStore } from '../../store';

const Login: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const router = useRouter();
  const { signIn, error, isLoading } = useStore();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    await signIn(email, password);
    if (!error) {
      router.push('/profile');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">Přihlášení</h2>
        {error && <p className="text-red-500 text-center">{error}</p>}
        <form onSubmit={handleLogin} className="mt-8 space-y-6">
          <input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
          />
          <input
            type="password"
            placeholder="Heslo"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
          />
          <button 
            type="submit" 
            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            disabled={isLoading}
          >
            {isLoading ? 'Přihlašování...' : 'Přihlásit se'}
          </button>
        </form>
        <p className="mt-2 text-center text-sm text-gray-600">
          Nemáte účet? <Link href="/register" className="font-medium text-indigo-600 hover:text-indigo-500">Registrovat se</Link>
        </p>
      </div>
    </div>
  );
};

export default Login;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\app\products\page.tsx
==================================================
"use client";

import React, { useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useStore } from '../../store';
import { supabase } from '../../utils/supabaseClient';
import { Product } from '../../types/types';

const Products: React.FC = () => {
  const { products, setProducts } = useStore();

  useEffect(() => {
    const fetchProducts = async () => {
      const { data, error } = await supabase.from('products').select('*');
      if (error) {
        console.error('Chyba při načítání produktů:', error);
      } else {
        setProducts(data || []);
      }
    };

    fetchProducts();
  }, [setProducts]);

  if (products.length === 0) {
    return (
      <div className="flex justify-center items-center h-64">
        <p className="text-xl">Načítání produktů...</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto px-4">
      <h1 className="text-3xl font-bold mb-8 text-center">Naše Produkty</h1>
      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {products.map((product: Product) => (
          <Link href={`/designer/${product.id}`} key={product.id} passHref>
            <div className="border rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300">
              <Image 
                src={product.image_url} 
                alt={product.name} 
                width={300} 
                height={300} 
                className="w-full h-48 object-cover"
              />
              <div className="p-4">
                <h2 className="text-xl font-semibold mb-2">{product.name}</h2>
                <p className="text-gray-600">{product.price} Kč</p>
              </div>
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
};

export default Products;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\app\profile\page.tsx
==================================================
"use client";

import React from 'react';
import { useRouter } from 'next/router';
import { useStore } from '../../store';
import SavedDesigns from '../../components/products/SavedDesigns';
import AuthGuard from '../../components/auth/AuthGuard';

const Profile: React.FC = () => {
  const router = useRouter();
  const { user, signOut } = useStore();

  const handleLogout = async () => {
    await signOut();
    router.push('/');
  };

  return (
    <AuthGuard>
      <div className="container mx-auto mt-10 p-5">
        <h1 className="text-2xl font-bold mb-5">Profil uživatele</h1>
        <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
          <p className="mb-4"><strong>Email:</strong> {user?.email}</p>
          {user?.user_metadata && (
            <>
              <p className="mb-4"><strong>Jméno:</strong> {user.user_metadata.full_name}</p>
              <p className="mb-4"><strong>Telefon:</strong> {user.user_metadata.phone}</p>
            </>
          )}
          <button 
            onClick={handleLogout}
            className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            Odhlásit se
          </button>
        </div>
        <SavedDesigns user={user} />
      </div>
    </AuthGuard>
  );
};

export default Profile;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\app\register\page.tsx
==================================================
"use client";

import React, { useState } from 'react';
import { useRouter } from 'next/router';
import Link from 'next/link';
import { useStore } from '../../store';

const Register: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const router = useRouter();
  const { signUp, error, isLoading } = useStore();

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    await signUp(email, password);
    if (!error) {
      router.push('/login');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">Registrace</h2>
        {error && <p className="text-red-500 text-center">{error}</p>}
        <form onSubmit={handleRegister} className="mt-8 space-y-6">
          <input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
          />
          <input
            type="password"
            placeholder="Heslo"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
          />
          <button 
            type="submit" 
            className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
            disabled={isLoading}
          >
            {isLoading ? 'Registrace...' : 'Registrovat se'}
          </button>
        </form>
        <p className="mt-2 text-center text-sm text-gray-600">
          Již máte účet? <Link href="/login" className="font-medium text-indigo-600 hover:text-indigo-500">Přihlásit se</Link>
        </p>
      </div>
    </div>
  );
};

export default Register;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\OrderDetails.tsx
==================================================
import React from 'react';
import { Order, OrderItem } from '../types/types';
import Image from 'next/image';
import CanvasComponent from '../products/CanvasComponent';

interface OrderDetailsProps {
  order: Order;
  orderItems: OrderItem[];
  productViews: { [key: string]: string };
  uploadedImages: { [key: string]: fabric.Image[] };
  currentView: string;
  setCurrentView: (view: string) => void;
  onViewOrderItem: (item: OrderItem) => void;
}

const OrderDetails: React.FC<OrderDetailsProps> = ({
  order,
  orderItems,
  productViews,
  uploadedImages,
  currentView,
  setCurrentView,
  onViewOrderItem,
}) => (
  <div>
    <h3>Náhled objednávky</h3>
    <ul>
      {orderItems.map((item) => (
        <li key={item.id}>
          <p>ID produktu: {item.product_id}</p>
          <p>Množství: {item.quantity}</p>
          <p>Cena: {item.price}</p>
          <button onClick={() => onViewOrderItem(item)}>Zobrazit návrh</button>
        </li>
      ))}
    </ul>
    {order && (
      <div>
        <div style={{ display: 'flex', gap: '10px', marginBottom: '20px' }}>
          {Object.entries(productViews).map(([key, value]) =>
            value && (
              <Image
                key={key}
                src={value}
                alt="Náhled"
                width={100}
                height={100}
                style={{ cursor: 'pointer' }}
                onClick={() => setCurrentView(key)}
              />
            )
          )}
        </div>
        <CanvasComponent
          uploadedImages={uploadedImages}
          currentView={currentView}
          productViews={productViews}
          setUploadedImages={() => {}}
          readOnly={true}
        />
      </div>
    )}
  </div>
);

export default OrderDetails;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\OrdersList.tsx
==================================================
import React from 'react';
import { Order } from '../types/types';

interface OrdersListProps {
  orders: Order[];
  onViewOrder: (order: Order) => void;
}

const OrdersList: React.FC<OrdersListProps> = ({ orders, onViewOrder }) => (
  <div>
    <h2>Objednávky zákazníků</h2>
    {orders.length > 0 ? (
      <ul>
        {orders.map((order) => (
          <li key={order.id}>
            <p>ID objednávky: {order.id}</p>
            <p>Celková cena: {order.total_price}</p>
            <button onClick={() => onViewOrder(order)}>Zobrazit objednávku</button>
          </li>
        ))}
      </ul>
    ) : (
      <p>Žádné objednávky nenalezeny</p>
    )}
  </div>
);

export default OrdersList;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\auth\AuthGuard.tsx
==================================================
"use client";

import React, { useEffect } from 'react';
import { useRouter } from 'next/router';
import { useStore } from '../../store';

interface AuthGuardProps {
  children: React.ReactNode;
}

const AuthGuard: React.FC<AuthGuardProps> = ({ children }) => {
  const router = useRouter();
  const { user, isLoading } = useStore();

  useEffect(() => {
    if (!isLoading && !user) {
      router.push('/login');
    }
  }, [user, isLoading, router]);

  if (isLoading) {
    return <div>Načítání...</div>;
  }

  if (!user) {
    return null;
  }

  return <>{children}</>;
};

export default AuthGuard;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\auth\AuthProvider.tsx
==================================================
"use client";

import React, { useEffect } from 'react';
import { useStore } from '../../store';
import { supabase } from '../../utils/supabaseClient';

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const { setUser } = useStore();

  useEffect(() => {
    const { data: authListener } = supabase.auth.onAuthStateChange((event, session) => {
      if (event === 'SIGNED_IN') {
        setUser(session?.user ?? null);
      } else if (event === 'SIGNED_OUT') {
        setUser(null);
      }
    });

    return () => {
      authListener.subscription.unsubscribe();
    };
  }, [setUser]);

  return <>{children}</>;
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\EditProducts\AddProductForm.tsx
==================================================
import React from 'react';
import { Product, ViewFiles } from '../../types/types';
import ImageUpload from './ImageUpload';

interface AddProductFormProps {
  newProduct: Partial<Product>;
  onInputChange: (e: React.ChangeEvent<HTMLInputElement>, field: keyof Product) => void;
  onImageChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onViewImageChange: (e: React.ChangeEvent<HTMLInputElement>, view: string) => void;
  onAddProduct: () => void;
}

const AddProductForm: React.FC<AddProductFormProps> = ({
  newProduct,
  onInputChange,
  onImageChange,
  onViewImageChange,
  onAddProduct
}) => (
  <div>
    <h2>Přidat nový produkt</h2>
    <input
      type="text"
      placeholder="Název"
      value={newProduct.name || ''}
      onChange={(e) => onInputChange(e, 'name')}
    />
    <input
      type="text"
      placeholder="Popis"
      value={newProduct.description || ''}
      onChange={(e) => onInputChange(e, 'description')}
    />
    <input
      type="number"
      placeholder="Cena"
      value={newProduct.price as number || ''}
      onChange={(e) => onInputChange(e, 'price')}
    />
    <ImageUpload onChange={onImageChange} label="Hlavní obrázek" />
    {['view_1', 'view_2', 'view_3', 'view_4'].map((view) => (
      <ImageUpload
        key={view}
        onChange={(e) => onViewImageChange(e, view)}
        label={`Obrázek pro ${view}`}
      />
    ))}
    <button onClick={onAddProduct}>Přidat Produkt</button>
  </div>
);

export default AddProductForm;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\EditProducts\ImageUpload.tsx
==================================================
import React from 'react';

interface ImageUploadProps {
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  label: string;
}

const ImageUpload: React.FC<ImageUploadProps> = ({ onChange, label }) => (
  <input
    type="file"
    onChange={onChange}
    aria-label={label}
  />
);

export default ImageUpload;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\EditProducts\ProductItem.tsx
==================================================
import React from 'react';
import { Product } from '../../types/types';

interface ProductItemProps {
  product: Product;
  onUpdate: (id: string, updatedProduct: Partial<Product>) => void;
}

const ProductItem: React.FC<ProductItemProps> = ({ product, onUpdate }) => (
  <div>
    <input
      type="text"
      value={product.name}
      onChange={(e) => onUpdate(product.id, { name: e.target.value })}
    />
    <input
      type="text"
      value={product.description}
      onChange={(e) => onUpdate(product.id, { description: e.target.value })}
    />
    <input
      type="number"
      value={product.price}
      onChange={(e) => onUpdate(product.id, { price: parseFloat(e.target.value) })}
    />
    <input
      type="text"
      value={product.image_url}
      onChange={(e) => onUpdate(product.id, { image_url: e.target.value })}
    />
    {['view_1', 'view_2', 'view_3', 'view_4'].map((view) => (
      <input
        key={view}
        type="text"
        value={product[view as keyof Product]}
        onChange={(e) => onUpdate(product.id, { [view]: e.target.value })}
      />
    ))}
  </div>
);

export default ProductItem;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\EditProducts\ProductList.tsx
==================================================
import React from 'react';
import { Product } from '../../types/types';
import ProductItem from './ProductItem';

interface ProductListProps {
  products: Product[];
  onUpdateProduct: (id: string, updatedProduct: Partial<Product>) => void;
}

const ProductList: React.FC<ProductListProps> = ({ products, onUpdateProduct }) => (
  <div>
    <h2>Seznam produktů</h2>
    {products.length > 0 ? (
      products.map((product) => (
        <ProductItem key={product.id} product={product} onUpdate={onUpdateProduct} />
      ))
    ) : (
      <p>Žádné produkty nebyly nalezeny.</p>
    )}
  </div>
);

export default ProductList;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\EditProducts\types.ts
==================================================
export interface Product {
    id: string;
    name: string;
    description: string;
    price: number;
    image_url: string;
    view_1: string;
    view_2: string;
    view_3: string;
    view_4: string;
}

export interface ViewFiles {
    [key: string]: File | null;
}

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\employee\DesignViewerComponent.tsx
==================================================
import React from 'react';
import { fabric } from 'fabric';
import CanvasComponent from '../products/CanvasComponent';
import useProductViews from '../../hooks/useProductViews';

interface DesignViewerComponentProps {
  productId: string | null;
  uploadedImages: { [key: string]: fabric.Image[] };
  onViewOrderItem: (item: any) => void;
}

const DesignViewerComponent: React.FC<DesignViewerComponentProps> = ({
  productId,
  uploadedImages,
  onViewOrderItem,
}) => {
  const [currentView, setCurrentView] = React.useState('view_1');
  const productViews = useProductViews(productId || undefined);

  if (!productId) return null;

  return (
    <div>
      <h3>Náhled designu</h3>
      <CanvasComponent
        uploadedImages={uploadedImages}
        currentView={currentView}
        productViews={productViews}
        setUploadedImages={() => {}}
        readOnly={true}
      />
      <div>
        {Object.keys(productViews).map((view) => (
          <button key={view} onClick={() => setCurrentView(view)}>
            {view}
          </button>
        ))}
      </div>
    </div>
  );
};

export default DesignViewerComponent;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\employee\OrderDetailsComponent.tsx
==================================================
import React from 'react';
import { Order, OrderItem } from '../../types/types';

interface OrderDetailsComponentProps {
  order: Order;
  orderItems: OrderItem[];
}

const OrderDetailsComponent: React.FC<OrderDetailsComponentProps> = ({ order, orderItems }) => {
  return (
    <div>
      <h3>Detail objednávky</h3>
      <p>ID objednávky: {order.id}</p>
      <p>Celková cena: {order.total_price}</p>
      <h4>Položky objednávky:</h4>
      <ul>
        {orderItems.map((item) => (
          <li key={item.id}>
            <p>Produkt ID: {item.product_id}</p>
            <p>Množství: {item.quantity}</p>
            <p>Cena: {item.price}</p>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default OrderDetailsComponent;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\employee\OrderListComponent.tsx
==================================================
import React from 'react';
import { Order } from '../../types/types';

interface OrderListComponentProps {
  orders: Order[];
  onViewOrder: (order: Order) => void;
}

const OrderListComponent: React.FC<OrderListComponentProps> = ({ orders, onViewOrder }) => {
  return (
    <div>
      <h2>Seznam objednávek</h2>
      <ul>
        {orders.map((order) => (
          <li key={order.id}>
            <span>ID objednávky: {order.id}</span>
            <span>Celková cena: {order.total_price}</span>
            <button onClick={() => onViewOrder(order)}>Zobrazit detail</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default OrderListComponent;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\employee\OrdersList.tsx
==================================================
import React from 'react';
import { Order } from '../../types/types';

interface OrdersListProps {
  orders: Order[];
  onViewOrder: (order: Order) => void;
}

const OrdersList: React.FC<OrdersListProps> = ({ orders, onViewOrder }) => (
  <div>
    <h2>Seznam objednávek</h2>
    <ul>
      {orders.map((order) => (
        <li key={order.id}>
          <span>ID objednávky: {order.id}</span>
          <span>Celková cena: {order.total_price}</span>
          <button onClick={() => onViewOrder(order)}>Zobrazit detail</button>
        </li>
      ))}
    </ul>
  </div>
);

export default OrdersList;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\layout\Layout.tsx
==================================================
"use client";

import React from 'react';
import Link from 'next/link';
import { useStore } from '../../store';
import { usePathname } from 'next/navigation';

interface LayoutProps {
  children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  const { user } = useStore();
  const pathname = usePathname();
  const isDesignerPage = pathname.startsWith('/designer');

  return (
    <div className="min-h-screen flex flex-col">
      <nav className="bg-gray-800 text-white p-4">
        <div className="container mx-auto flex justify-between items-center">
          <Link href="/" className="text-xl font-bold">PrintPresto</Link>
          <div className="space-x-4">
            <Link href="/products" className="hover:text-gray-300">Produkty</Link>
            <Link href="/cart" className="hover:text-gray-300">Košík</Link>
            {user ? (
              <Link href="/profile" className="hover:text-gray-300">Profil</Link>
            ) : (
              <Link href="/login" className="hover:text-gray-300">Přihlásit se</Link>
            )}
          </div>
        </div>
      </nav>
      <main className={`flex-grow container mx-auto ${isDesignerPage ? '' : 'mt-4 p-4'}`}>
        {children}
      </main>
      <footer className="bg-gray-800 text-white p-4 mt-8">
        <div className="container mx-auto text-center">
          &copy; {new Date().getFullYear()} PrintPresto. Všechna práva vyhrazena.
        </div>
      </footer>
    </div>
  );
};

export default Layout;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\products\ActionButtons.tsx
==================================================
import React from 'react';
import { ActionButtonsProps } from '../../types/productDesigner';

const ActionButtons: React.FC<ActionButtonsProps> = ({
  onSaveDesign,
  onAddToCart,
  onGoToCart,
}) => {
  return (
    <div className="flex space-x-4">
      <button 
        onClick={onSaveDesign}
        className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
      >
        Uložit návrh
      </button>
      <button 
        onClick={onAddToCart}
        className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
      >
        Přidat do košíku
      </button>
      <button 
        onClick={onGoToCart}
        className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
      >
        Přejít do košíku
      </button>
    </div>
  );
};

export default ActionButtons;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\products\CanvasComponent.tsx
==================================================
import React, { useRef } from 'react';
import { fabric } from 'fabric';
import { StaticImageData } from 'next/image';
import CanvasSetup from './CanvasSetup';
import ImageUploader from './ImageUploader';
import ImageManager from './ImageManager';

interface CanvasComponentProps {
  uploadedImages: { [key: string]: fabric.Image[] };
  currentView: string;
  productViews: { [key: string]: string | StaticImageData };
  setUploadedImages: React.Dispatch<React.SetStateAction<{ [key: string]: fabric.Image[] }>>;
  readOnly: boolean;
}

const CanvasComponent: React.FC<CanvasComponentProps> = ({
  uploadedImages,
  currentView,
  productViews,
  setUploadedImages,
  readOnly,
}) => {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);

  return (
    <div>
      <canvas ref={canvasRef} className="w-64 h-64" />
      <CanvasSetup
        canvasRef={canvasRef}
        currentView={currentView}
        productViews={productViews}
        uploadedImages={uploadedImages}
        readOnly={readOnly}
      />
      {!readOnly && (
        <>
          <ImageUploader
            canvasRef={canvasRef}
            currentView={currentView}
            setUploadedImages={setUploadedImages}
          />
          <ImageManager
            canvasRef={canvasRef}
            currentView={currentView}
            uploadedImages={uploadedImages}
            setUploadedImages={setUploadedImages}
          />
        </>
      )}
    </div>
  );
};

export default CanvasComponent;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\products\CanvasSetup.tsx
==================================================
import React, { useEffect, useState } from 'react';
import { fabric } from 'fabric';
import { StaticImageData } from 'next/image';

interface CanvasSetupProps {
  canvasRef: React.RefObject<HTMLCanvasElement>;
  currentView: string;
  productViews: { [key: string]: string | StaticImageData };
  uploadedImages: { [key: string]: fabric.Image[] };
  readOnly: boolean;
}

const CanvasSetup: React.FC<CanvasSetupProps> = ({
  canvasRef,
  currentView,
  productViews,
  uploadedImages,
  readOnly,
}) => {
  const [canvas, setCanvas] = useState<fabric.Canvas | null>(null);

  useEffect(() => {
    if (canvasRef.current && !canvas) {
      const newCanvas = new fabric.Canvas(canvasRef.current);
      setCanvas(newCanvas);
    }
  }, [canvasRef, canvas]);

  useEffect(() => {
    if (canvas && productViews && productViews[currentView]) {
      const imageUrl = productViews[currentView];
      canvas.clear();

      if (typeof imageUrl === 'string') {
        fabric.Image.fromURL(imageUrl, (imgObj) => {
          if (imgObj) {
            imgObj.selectable = false;
            canvas.add(imgObj);
            canvas.sendToBack(imgObj);

            const maxSize = 256;
            const scale = Math.min(maxSize / imgObj.width!, maxSize / imgObj.height!);
            imgObj.scale(scale);

            canvas.setDimensions({ width: maxSize, height: maxSize });

            imgObj.setCoords();
            canvas.renderAll();
          }
        });
      } else {
        console.error('Unsupported image type for', currentView);
      }

      if (uploadedImages[currentView]) {
        uploadedImages[currentView].forEach(img => {
          if (!canvas.contains(img)) {
            img.selectable = !readOnly;
            canvas.add(img);
            img.bringToFront();
            img.setCoords();
          }
        });
      }

      canvas.renderAll();
    }
  }, [canvas, productViews, currentView, uploadedImages, readOnly]);

  useEffect(() => {
    if (canvas && readOnly) {
      canvas.selection = false;
      canvas.forEachObject((obj) => {
        obj.selectable = false;
        obj.evented = false;
      });
      canvas.renderAll();
    }
  }, [canvas, readOnly]);

  return null;
};

export default CanvasSetup;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\products\ImageManager.tsx
==================================================
import React from 'react';
import { fabric } from 'fabric';

interface ImageManagerProps {
  canvasRef: React.RefObject<HTMLCanvasElement>;
  currentView: string;
  uploadedImages: { [key: string]: fabric.Image[] };
  setUploadedImages: React.Dispatch<React.SetStateAction<{ [key: string]: fabric.Image[] }>>;
}

const ImageManager: React.FC<ImageManagerProps> = ({
  canvasRef,
  currentView,
  uploadedImages,
  setUploadedImages,
}) => {
  const removeSelectedImages = () => {
    if (!canvasRef.current) return;

    const canvas = new fabric.Canvas(canvasRef.current);
    const activeObjects = canvas.getActiveObjects();
    if (activeObjects.length === 0) return;

    activeObjects.forEach(obj => canvas.remove(obj));
    canvas.discardActiveObject();
    canvas.requestRenderAll();

    const updatedImages = uploadedImages[currentView].filter(img => !activeObjects.includes(img));
    setUploadedImages({
      ...uploadedImages,
      [currentView]: updatedImages
    });
  };

  return <button onClick={removeSelectedImages}>Odstranit označené obrázky</button>;
};

export default ImageManager;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\products\ImageUploader.tsx
==================================================
import React from 'react';
import { fabric } from 'fabric';

interface ImageUploaderProps {
  canvasRef: React.RefObject<HTMLCanvasElement>;
  currentView: string;
  setUploadedImages: React.Dispatch<React.SetStateAction<{ [key: string]: fabric.Image[] }>>;
}

const ImageUploader: React.FC<ImageUploaderProps> = ({
  canvasRef,
  currentView,
  setUploadedImages,
}) => {
  const handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files && event.target.files[0];
    if (file && canvasRef.current) {
      const canvas = new fabric.Canvas(canvasRef.current);
      const reader = new FileReader();

      reader.onload = (fEvent) => {
        fabric.Image.fromURL(fEvent.target!.result as string, (img) => {
          const maxSize = 256;
          const scale = Math.min(maxSize / img.width!, maxSize / img.height!);
          img.scale(scale);

          img.selectable = true;
          canvas.add(img);
          img.bringToFront();
          img.setCoords();
          canvas.renderAll();

          setUploadedImages(prev => ({
            ...prev,
            [currentView]: [...prev[currentView], img]
          }));
        });
      };

      reader.readAsDataURL(file);
    }
  };

  return <input type="file" onChange={handleUpload} />;
};

export default ImageUploader;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\products\ProductDesignerLayout.tsx
==================================================
import React from 'react';
import ProductViewSelector from './ProductViewSelector';
import CanvasComponent from './CanvasComponent';
import ActionButtons from './ActionButtons';
import { ProductDesignerProps } from '../../types/productDesigner';

const ProductDesignerLayout: React.FC<ProductDesignerProps> = ({
  productViews,
  uploadedImages,
  setUploadedImages,
  currentView,
  setCurrentView,
  handleSaveDesign,
  addToCartHandler,
  onGoToCart,
}) => {
  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Designér produktů</h1>
      <ProductViewSelector
        productViews={productViews}
        currentView={currentView}
        setCurrentView={setCurrentView}
      />
      <div className="mb-6">
        <CanvasComponent
          uploadedImages={uploadedImages}
          currentView={currentView}
          productViews={productViews}
          setUploadedImages={setUploadedImages}
          readOnly={false}
        />
      </div>
      <ActionButtons
        onSaveDesign={handleSaveDesign}
        onAddToCart={addToCartHandler}
        onGoToCart={onGoToCart}
      />
    </div>
  );
};

export default ProductDesignerLayout;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\products\ProductViewSelector.tsx
==================================================
import React from 'react';
import Image from 'next/image';
import { ProductViewSelectorProps } from '../../types/productDesigner';

const ProductViewSelector: React.FC<ProductViewSelectorProps> = ({
  productViews,
  currentView,
  setCurrentView,
}) => {
  return (
    <div className="flex flex-wrap -mx-2 mb-6">
      {Object.entries(productViews).map(([key, value]) =>
        value && (
          <div key={key} className="px-2 mb-4">
            <Image 
              src={value}
              alt={`Náhled ${key}`}
              width={100}
              height={100}
              className={`cursor-pointer border-2 hover:border-blue-500 transition-colors ${
                currentView === key ? 'border-blue-500' : 'border-gray-300'
              }`}
              onClick={() => setCurrentView(key)}
            />
          </div>
        )
      )}
    </div>
  );
};

export default ProductViewSelector;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\components\products\SavedDesigns.tsx
==================================================
// src/components/products/SavedDesigns.tsx
import React, { useEffect, useState } from 'react';
import { supabase } from '../../utils/supabaseClient';
import { User } from '@supabase/supabase-js';
import { useRouter } from 'next/router';

interface SavedDesignsProps {
  user: User | null;
}

const SavedDesigns: React.FC<SavedDesignsProps> = ({ user }) => {
  const [savedDesigns, setSavedDesigns] = useState<any[]>([]);
  const router = useRouter();

  useEffect(() => {
    const fetchSavedDesigns = async () => {
      if (!user) return;

      const { data, error } = await supabase
        .from('designs')
        .select('*')
        .eq('user_id', user.id);

      if (error) {
        console.error('Chyba při načítání uložených návrhů:', error);
      } else {
        setSavedDesigns(data || []);
      }
    };

    fetchSavedDesigns();
  }, [user]);

  const handleDesignSelect = (productId: string, design: any) => {
    const designData = {
      view_1_images: design.view_1_images,
      view_2_images: design.view_2_images,
      view_3_images: design.view_3_images,
      view_4_images: design.view_4_images,
    };

    const encodedDesignData = encodeURIComponent(JSON.stringify(designData));
    router.push(`/designer/${productId}?designData=${encodedDesignData}`);
  };

  return (
    <div className="mt-6">
      <h2 className="text-xl font-semibold mb-4">Uložené návrhy</h2>
      {savedDesigns.length > 0 ? (
        <ul className="space-y-2">
          {savedDesigns.map((design) => (
            <li key={design.id}>
              <button 
                onClick={() => handleDesignSelect(design.product_id, design)}
                className="w-full py-2 px-4 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
              >
                Návrh pro produkt {design.product_id}
              </button>
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-gray-600">Žádné uložené návrhy</p>
      )}
    </div>
  );
};

export default SavedDesigns;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\features\cart\Cart.tsx
==================================================
import React from 'react';
import { useCart } from '../../hooks/useCart';
import CartItem from './CartItem';
import CheckoutButton from './CheckoutButton';

const Cart: React.FC = () => {
  const { cart, removeFromCart, handleQuantityChange, handleSizeChange, handleCheckout } = useCart();

  return (
    <div>
      {cart.length > 0 ? (
        <>
          <ul className="space-y-4">
            {cart.map((item, index) => (
              <CartItem 
                key={index} 
                item={item} 
                index={index}
                onQuantityChange={handleQuantityChange}
                onSizeChange={handleSizeChange}
                onRemove={removeFromCart}
              />
            ))}
          </ul>
          <CheckoutButton onCheckout={handleCheckout} />
        </>
      ) : (
        <p>Košík je prázdný</p>
      )}
    </div>
  );
};

export default Cart;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\features\cart\CartItem.tsx
==================================================
import React from 'react';
import { CartItem as CartItemType } from '../../types/types';

interface CartItemProps {
  item: CartItemType;
  index: number;
  onQuantityChange: (index: number, quantity: number) => void;
  onSizeChange: (index: number, size: 'S' | 'M' | 'L' | 'XL') => void;
  onRemove: (productId: string) => void;
}

const CartItem: React.FC<CartItemProps> = ({ item, index, onQuantityChange, onSizeChange, onRemove }) => {
  return (
    <li className="border p-4 rounded">
      <p>Produkt ID: {item.productId}</p>
      <p>Design ID: {item.designId}</p>
      <label className="block mb-2">
        Velikost:
        <select 
          value={item.size} 
          onChange={(e) => onSizeChange(index, e.target.value as 'S' | 'M' | 'L' | 'XL')}
          className="ml-2 border rounded"
        >
          <option value="S">S</option>
          <option value="M">M</option>
          <option value="L">L</option>
          <option value="XL">XL</option>
        </select>
      </label>
      <label className="block mb-2">
        Počet:
        <input
          type="number"
          value={item.quantity}
          onChange={(e) => onQuantityChange(index, parseInt(e.target.value))}
          min="1"
          className="ml-2 border rounded w-16 text-center"
        />
      </label>
      <p>Cena: {item.price} Kč</p>
      <button 
        onClick={() => onRemove(item.productId)}
        className="mt-2 bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600 transition-colors"
      >
        Odstranit
      </button>
    </li>
  );
};

export default CartItem;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\features\cart\cartService.ts
==================================================
import { useStore } from '../../store';
import { supabase } from '../../utils/supabaseClient';
import { CartItem, Order } from '../../types/types';

export const loadCartFromLocalStorage = () => {
  const savedCartItems = localStorage.getItem('cartItems');
  if (savedCartItems) {
    const parsedCartItems = JSON.parse(savedCartItems);
    useStore.setState({ cart: parsedCartItems });
  }
};

export const handleQuantityChange = (index: number, quantity: number) => {
  useStore.setState((state) => {
    const updatedCart = [...state.cart];
    updatedCart[index].quantity = quantity;
    localStorage.setItem('cartItems', JSON.stringify(updatedCart));
    return { cart: updatedCart };
  });
};

export const handleSizeChange = (index: number, size: 'S' | 'M' | 'L' | 'XL') => {
  useStore.setState((state) => {
    const updatedCart = [...state.cart];
    updatedCart[index].size = size;
    localStorage.setItem('cartItems', JSON.stringify(updatedCart));
    return { cart: updatedCart };
  });
};

export const handleCheckout = async () => {
  const { cart, user, clearCart } = useStore.getState();

  if (!user) {
    console.error('Uživatel není přihlášen');
    return;
  }

  const total_price = cart.reduce((total, item) => total + item.price * item.quantity, 0);

  try {
    const { data: order, error: orderError } = await supabase
      .from('orders')
      .insert({ user_id: user.id, total_price })
      .select()
      .single();

    if (orderError) throw orderError;

    const orderItems = cart.map(item => ({
      order_id: (order as Order).id,
      product_id: item.productId,
      quantity: item.quantity,
      price: item.price,
      design_id: item.designId,
    }));

    const { error: orderItemsError } = await supabase
      .from('order_items')
      .insert(orderItems);

    if (orderItemsError) throw orderItemsError;

    console.log('Objednávka byla úspěšně vytvořena');
    
    clearCart();
    localStorage.removeItem('cartItems');
  } catch (error) {
    console.error('Chyba při vytváření objednávky:', error);
  }
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\features\cart\cartStore.ts
==================================================
import { useStore } from '../../store';
import { CartItem } from '../../types/types';

export const updateCart = (updatedCart: CartItem[]) => {
  useStore.setState({ cart: updatedCart });
  localStorage.setItem('cartItems', JSON.stringify(updatedCart));
};

export const loadCartFromLocalStorage = () => {
  const savedCartItems = localStorage.getItem('cartItems');
  if (savedCartItems) {
    const parsedCartItems = JSON.parse(savedCartItems);
    useStore.setState({ cart: parsedCartItems });
  }
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\features\cart\CheckoutButton.tsx
==================================================
import React from 'react';

interface CheckoutButtonProps {
  onCheckout: () => Promise<void>;
}

const CheckoutButton: React.FC<CheckoutButtonProps> = ({ onCheckout }) => {
  return (
    <button 
      onClick={onCheckout}
      className="mt-4 bg-green-500 text-white px-6 py-2 rounded hover:bg-green-600 transition-colors"
    >
      Dokončit nákup
    </button>
  );
};

export default CheckoutButton;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useCart.ts
==================================================
import { useEffect } from 'react';
import { useStore } from '../store';
import { loadCartFromLocalStorage, handleQuantityChange, handleSizeChange, handleCheckout } from '../features/cart/cartService';

export const useCart = () => {
  const { cart, removeFromCart } = useStore();

  useEffect(() => {
    loadCartFromLocalStorage();
  }, []);

  return {
    cart,
    removeFromCart,
    handleQuantityChange,
    handleSizeChange,
    handleCheckout
  };
};


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useDesign.ts
==================================================
import { useState } from 'react';
import { fabric } from 'fabric';
import { loadDesign } from '../services/designService';
import { fetchDesign } from '../services/orderService';
import { OrderItem } from '../types/types';

export const useDesign = () => {
  const [uploadedImages, setUploadedImages] = useState<{ [key: string]: fabric.Image[] }>({ view_1: [], view_2: [], view_3: [], view_4: [] });
  const [selectedProductId, setSelectedProductId] = useState<string | null>(null);

  const handleViewOrderItem = async (item: OrderItem) => {
    setSelectedProductId(item.product_id);
    if (item.design_id) {
      try {
        const design = await fetchDesign(item.design_id);
        if (design) {
          const loadedImages = await loadDesign(item.product_id, design);
          if (loadedImages) {
            setUploadedImages(loadedImages);
          }
        }
      } catch (error) {
        console.error('Chyba při načítání designu:', error);
      }
    }
  };

  return { uploadedImages, selectedProductId, handleViewOrderItem };
};


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useEmployeeAuth.ts
==================================================
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import { useStore } from '../store';

export const useEmployeeAuth = () => {
  const router = useRouter();
  const { user } = useStore();

  useEffect(() => {
    if (user && !user.user_metadata?.is_employee) {
      router.push('/');
    }
  }, [user, router]);

  return { user };
};


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useImageUpload.ts
==================================================
import { useState } from 'react';
import { supabase } from '../utils/supabaseClient';

export const useImageUpload = () => {
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [viewFiles, setViewFiles] = useState<any>({});

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setImageFile(e.target.files[0]);
    }
  };

  const handleViewImageChange = (e: React.ChangeEvent<HTMLInputElement>, view: string) => {
    if (e.target.files && e.target.files[0]) {
      setViewFiles({ ...viewFiles, [view]: e.target.files[0] });
    }
  };

  const uploadImage = async (file: File) => {
    const fileName = `${Date.now()}_${file.name}`;
    const { data: uploadData, error: uploadError } = await supabase.storage.from('products').upload(fileName, file);
    if (uploadError) {
      console.error('Chyba při nahrávání obrázku:', uploadError);
      return null;
    }
    const { data: urlData } = await supabase.storage.from('products').getPublicUrl(fileName);
    if (!urlData) {
      console.error('Chyba při získávání veřejného URL');
      return null;
    }
    return urlData.publicUrl;
  };

  const uploadViewImage = async (file: File, view: string) => {
    const fileName = `${Date.now()}_${view}_${file.name}`;
    const { data: uploadData, error: uploadError } = await supabase.storage.from('product_views').upload(fileName, file);
    if (uploadError) {
      console.error(`Chyba při nahrávání obrázku pro ${view}:`, uploadError);
      return null;
    }
    const { data: urlData } = await supabase.storage.from('product_views').getPublicUrl(fileName);
    if (!urlData) {
      console.error(`Chyba při získávání veřejného URL pro ${view}`);
      return null;
    }
    return urlData.publicUrl;
  };

  return { imageFile, viewFiles, handleImageChange, handleViewImageChange, uploadImage, uploadViewImage };
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useOrders.ts
==================================================
import { useState, useEffect } from 'react';
import { Order, OrderItem } from '../types/types';
import { fetchOrders, fetchOrderItems } from '../services/orderService';

export const useOrders = () => {
  const [orders, setOrders] = useState<Order[]>([]);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);

  useEffect(() => {
    fetchOrders().then(setOrders).catch(console.error);
  }, []);

  const handleViewOrder = async (order: Order) => {
    setSelectedOrder(order);
    try {
      const items = await fetchOrderItems(order.id);
      setOrderItems(items);
    } catch (error) {
      console.error('Chyba při načítání položek objednávky:', error);
    }
  };

  return { orders, selectedOrder, orderItems, handleViewOrder };
};


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useProductAdd.ts
==================================================
import { useState } from 'react';
import { supabase } from '../utils/supabaseClient';
import { Product } from '../types/types';
import { useImageUpload } from '../hooks/useImageUpload';

export const useProductAdd = () => {
  const [newProduct, setNewProduct] = useState<Partial<Product>>({});
  const { uploadImage, uploadViewImage } = useImageUpload();

  const addProduct = async (product: Partial<Product>, imageFile: File | null, viewFiles: any) => {
    let imageUrl: string = '';
    if (imageFile) {
      const uploadedImageUrl = await uploadImage(imageFile);
      if (uploadedImageUrl) {
        imageUrl = uploadedImageUrl;
      }
    }

    const viewUrls: { [key: string]: string } = {};
    for (const view in viewFiles) {
      if (viewFiles[view]) {
        const uploadedViewUrl = await uploadViewImage(viewFiles[view]!, view);
        if (uploadedViewUrl) {
          viewUrls[view] = uploadedViewUrl;
        }
      }
    }

    const productToAdd = { ...product, image_url: imageUrl, ...viewUrls };
    const { data, error } = await supabase.from('products').insert([productToAdd]).select();
    if (error) {
      console.error('Chyba při přidávání produktu:', error);
      return null;
    } else {
      setNewProduct({});
      return data[0];
    }
  };

  return { newProduct, setNewProduct, addProduct };
};


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useProductDesigner.ts
==================================================
// src/hooks/useProductDesigner.ts
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { fabric } from 'fabric';
import useUser from './useUser';
import useProductViews from './useProductViews';
import { loadDesign, saveDesign } from '../services/designService';
import { useStore } from '../store';
import { CartItem } from '../types/types';

export const useProductDesigner = () => {
  const router = useRouter();
  const { id, designData } = router.query;
  const productViews = useProductViews(id as string);
  const [uploadedImages, setUploadedImages] = useState<{ [key: string]: fabric.Image[] }>({ view_1: [], view_2: [], view_3: [], view_4: [] });
  const [currentView, setCurrentView] = useState<string>('view_1');
  const user = useUser();
  const addToCart = useStore(state => state.addToCart);

  useEffect(() => {
    if (designData) {
      const decodedDesignData = JSON.parse(decodeURIComponent(designData as string));
      handleDesignSelect(id as string, decodedDesignData);
    }
  }, [id, designData]);

  const handleSaveDesign = async () => {
    const designId = await saveDesign(user, id as string, uploadedImages);
    return designId;
  };

  const handleDesignSelect = async (productId: string, uploadedImagesData: any) => {
    const updatedImages = await loadDesign(productId, uploadedImagesData);
    if (updatedImages) {
      setUploadedImages(updatedImages);
    }
  };

  const addToCartHandler = async () => {
    const designId = await handleSaveDesign();

    const newItem: CartItem = {
      designId,
      productId: id as string,
      quantity: 1,
      size: 'M', // Default size, you might want to make this configurable
      price: 100, // Example price, should be fetched from product data
    };
    addToCart(newItem);
  };

  return {
    productViews,
    uploadedImages,
    setUploadedImages,
    currentView,
    setCurrentView,
    handleSaveDesign,
    addToCartHandler,
  };
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useProductList.ts
==================================================
import { useState, useEffect } from 'react';
import { supabase } from '../utils/supabaseClient';
import { Product } from '../types/types';

export const useProductList = () => {
  const [products, setProducts] = useState<Product[]>([]);

  const fetchProducts = async () => {
    const { data, error } = await supabase.from('products').select('*');
    if (error) {
      console.error('Chyba při načítání produktů:', error);
    } else {
      setProducts(data || []);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  return { products, fetchProducts };
};


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useProductManagement.ts
==================================================
import { useState, useEffect } from 'react';
import { supabase } from '../utils/supabaseClient';
import { Product } from '../components/EditProducts/types';
import { useImageUpload } from './useImageUpload';

export const useProductManagement = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [newProduct, setNewProduct] = useState<Partial<Product>>({});
  const { uploadImage, uploadViewImage } = useImageUpload();

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    const { data, error } = await supabase.from('products').select('*');
    if (error) {
      console.error('Chyba při načítání produktů:', error);
    } else {
      setProducts(data);
    }
  };

  const addProduct = async (product: Partial<Product>, imageFile: File | null, viewFiles: any) => {
    let imageUrl: string = '';
    if (imageFile) {
      const uploadedImageUrl = await uploadImage(imageFile);
      if (uploadedImageUrl) {
        imageUrl = uploadedImageUrl;
      }
    }

    const viewUrls: { [key: string]: string } = {};
    for (const view in viewFiles) {
      if (viewFiles[view]) {
        const uploadedViewUrl = await uploadViewImage(viewFiles[view]!, view);
        if (uploadedViewUrl) {
          viewUrls[view] = uploadedViewUrl;
        }
      }
    }

    const productToAdd = { ...product, image_url: imageUrl, ...viewUrls };
    const { data, error } = await supabase.from('products').insert([productToAdd]).select();
    if (error) {
      console.error('Chyba při přidávání produktu:', error);
    } else {
      setProducts([...products, data[0]]);
      setNewProduct({});
    }
  };

  const updateProduct = async (id: string, updatedProduct: Partial<Product>) => {
    const { data, error } = await supabase.from('products').update(updatedProduct).eq('id', id).select();
    if (error) {
      console.error('Chyba při aktualizaci produktu:', error);
    } else {
      setProducts(products.map(product => (product.id === id ? data[0] : product)));
    }
  };

  return { products, newProduct, setNewProduct, addProduct, updateProduct };
};


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useProducts.ts
==================================================
import { useState, useEffect } from 'react';
import { supabase } from '../utils/supabaseClient';
import { Product } from '../components/EditProducts/types';

export const useProducts = () => {
  const [products, setProducts] = useState<Product[]>([]);

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    const { data, error } = await supabase.from('products').select('*');
    if (error) {
      console.error('Chyba při načítání produktů:', error);
    } else {
      setProducts(data);
    }
  };

  return { products, setProducts, fetchProducts };
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useProductState.ts
==================================================
import { useState } from 'react';
import { supabase } from '../utils/supabaseClient';
import { Product } from '../components/EditProducts/types';
import { useImageUpload } from './useImageUpload';

export const useProductState = () => {
  const [products, setProducts] = useState<Product[]>([]);
  const [newProduct, setNewProduct] = useState<Partial<Product>>({});

  const { uploadImage, uploadViewImage } = useImageUpload();

  const addProduct = async (product: Partial<Product>, imageFile: File | null, viewFiles: any) => {
    let imageUrl: string = '';
    if (imageFile) {
      const uploadedImageUrl = await uploadImage(imageFile);
      if (uploadedImageUrl) {
        imageUrl = uploadedImageUrl;
      }
    }

    const viewUrls: { [key: string]: string } = {};
    for (const view in viewFiles) {
      if (viewFiles[view]) {
        const uploadedViewUrl = await uploadViewImage(viewFiles[view]!, view);
        if (uploadedViewUrl) {
          viewUrls[view] = uploadedViewUrl;
        }
      }
    }

    const productToAdd = { ...product, image_url: imageUrl, ...viewUrls };
    const { data, error } = await supabase.from('products').insert([productToAdd]).select();
    if (error) {
      console.error('Chyba při přidávání produktu:', error);
    } else {
      setProducts([...products, data[0]]);
      setNewProduct({});
    }
  };

  const updateProduct = async (id: string, updatedProduct: Partial<Product>) => {
    const { data, error } = await supabase.from('products').update(updatedProduct).eq('id', id).select();
    if (error) {
      console.error('Chyba při aktualizaci produktu:', error);
    } else {
      setProducts(products.map(product => (product.id === id ? data[0] : product)));
    }
  };

  return { products, newProduct, setNewProduct, addProduct, updateProduct };
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useProductUpdate.ts
==================================================
import { supabase } from '../utils/supabaseClient';
import { Product } from '../types/types';

export const useProductUpdate = () => {
  const updateProduct = async (id: string, updatedProduct: Partial<Product>) => {
    const { data, error } = await supabase.from('products').update(updatedProduct).eq('id', id).select();
    if (error) {
      console.error('Chyba při aktualizaci produktu:', error);
      return null;
    } else {
      return data[0];
    }
  };

  return { updateProduct };
};


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useProductViews.tsx
==================================================
import { useEffect, useState } from 'react';
import { supabase } from '../utils/supabaseClient';

const useProductViews = (productId: string | string[] | undefined) => {
  const [productViews, setProductViews] = useState<{ [key: string]: string }>({ view_1: '', view_2: '', view_3: '', view_4: '' });

  useEffect(() => {
    const getProductViews = async () => {
      if (!productId) return;

      const { data, error } = await supabase
        .from('products')
        .select('view_1, view_2, view_3, view_4')
        .eq('id', productId)
        .single();

      if (error) {
        console.error('Chyba při načítání obrázků produktu:', error);
      } else if (data) {
        setProductViews({
          view_1: data.view_1,
          view_2: data.view_2,
          view_3: data.view_3,
          view_4: data.view_4
        });
      }
    };

    getProductViews();
  }, [productId]);

  return productViews;
};

export default useProductViews;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\hooks\useUser.tsx
==================================================
import { useEffect, useState } from 'react';
import { supabase } from '../utils/supabaseClient';
import { User } from '@supabase/supabase-js';
import { getUser } from '../services/auth/authService';

const useUser = () => {
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const user = await getUser();
        setUser(user);
      } catch (error) {
        console.error('Error fetching user:', error);
      }
    };
  
    fetchUser();
  }, []); 

  return user;
};

export default useUser;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\pages\editproducts.tsx
==================================================
import React from 'react';
import { useProductList } from '../hooks/useProductList';
import { useProductAdd } from '../hooks/useProductAdd';
import { useProductUpdate } from '../hooks/useProductUpdate';
import { useImageUpload } from '../hooks/useImageUpload';
import AddProductForm from '../components/EditProducts/AddProductForm';
import ProductList from '../components/EditProducts/ProductList';

const EditProducts: React.FC = () => {
  const { products, fetchProducts } = useProductList();
  const { newProduct, setNewProduct, addProduct } = useProductAdd();
  const { updateProduct } = useProductUpdate();
  const { imageFile, viewFiles, handleImageChange, handleViewImageChange } = useImageUpload();

  const handleAddProduct = async () => {
    const addedProduct = await addProduct(newProduct, imageFile, viewFiles);
    if (addedProduct) {
      fetchProducts();
    }
  };

  const handleUpdateProduct = async (id: string, updatedProduct: Partial<any>) => {
    const updated = await updateProduct(id, updatedProduct);
    if (updated) {
      fetchProducts();
    }
  };

  return (
    <div>
      <h1>Upravit Produkty</h1>
      <AddProductForm
        newProduct={newProduct}
        onInputChange={(e, field) => setNewProduct({ ...newProduct, [field]: e.target.value })}
        onImageChange={handleImageChange}
        onViewImageChange={handleViewImageChange}
        onAddProduct={handleAddProduct}
      />
      <ProductList products={products} onUpdateProduct={handleUpdateProduct} />
    </div>
  );
};

export default EditProducts;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\services\designService.ts
==================================================
import { supabase } from '../utils/supabaseClient';
import { fabric } from 'fabric';

function mapImages(images: fabric.Image[]) {
  return images.map(img => ({
    ...img.toObject(),
    left: img.left,
    top: img.top,
    scaleX: img.scaleX,
    scaleY: img.scaleY,
    angle: img.angle
  }));
}

async function loadImages(imagesData: any) {
  if (!imagesData) return [];
  console.log('Loading images:', imagesData);
  return await Promise.all(imagesData.map((imgData: any) =>
    new Promise<fabric.Image>((resolve) => {
      fabric.Image.fromURL(imgData.src, (img) => {
        console.log('Loaded image:', img);
        img.set({
          left: imgData.left,
          top: imgData.top,
          scaleX: imgData.scaleX,
          scaleY: imgData.scaleY,
          angle: imgData.angle,
        });
        resolve(img);
      });
    })
  ));
}

export const saveDesign = async (user: any, id: string | string[] | undefined, uploadedImages: { [key: string]: fabric.Image[] }) => {
  if (!user) {
    console.error('Uživatel není přihlášen');
    return null;
  }

  const designData = {
    user_id: user.id,
    product_id: id,
    view_1_images: mapImages(uploadedImages.view_1),
    view_2_images: mapImages(uploadedImages.view_2),
    view_3_images: mapImages(uploadedImages.view_3),
    view_4_images: mapImages(uploadedImages.view_4)
  };

  try {
    const { data, error } = await supabase.from('designs').insert(designData).select().single();

    if (error) {
      console.error('Chyba při ukládání návrhu:', error);
      return null;
    } else {
      console.log('Návrh byl úspěšně uložen');
      return data.id;
    }
  } catch (error) {
    console.error('Neočekávaná chyba při ukládání návrhu:', error);
    return null;
  }
};

export const loadDesign = async (productId: string, design: any) => {
  try {
    const { data: productData, error } = await supabase
      .from('products')
      .select('view_1, view_2, view_3, view_4')
      .eq('id', productId)
      .single();

    if (error) throw error;

    if (productData) {
      const updatedImages = {
        view_1: await loadImages(design.view_1_images),
        view_2: await loadImages(design.view_2_images),
        view_3: await loadImages(design.view_3_images),
        view_4: await loadImages(design.view_4_images),
      };

      console.log('Loaded images:', updatedImages);

      return updatedImages;
    }

    return null;
  } catch (error) {
    console.error('Chyba při načítání designu:', error);
    return null;
  }
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\services\orderService.ts
==================================================
import { supabase } from '../utils/supabaseClient';
import { Order, OrderItem } from '../types/types';

export const fetchOrders = async (): Promise<Order[]> => {
  const { data, error } = await supabase
    .from('orders')
    .select('*')
    .order('created_at', { ascending: false });

  if (error) throw error;
  return data || [];
};

export const fetchOrderItems = async (orderId: string): Promise<OrderItem[]> => {
  const { data, error } = await supabase
    .from('order_items')
    .select('*')
    .eq('order_id', orderId);

  if (error) throw error;
  return data || [];
};

export const fetchDesign = async (designId: string) => {
  const { data, error } = await supabase
    .from('designs')
    .select('*')
    .eq('id', designId)
    .single();

  if (error) throw error;
  return data;
};


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\services\auth\authService.ts
==================================================
import { supabase } from '../../utils/supabaseClient';

export const signIn = async (email: string, password: string) => {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) throw error;

    return { user: data.user, session: data.session };
  } catch (error) {
    console.error('Error logging in:', error);
    throw error;
  }
};

export const signUp = async (email: string, password: string) => {
  try {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
    });

    if (error) throw error;

    return { user: data.user, session: data.session };
  } catch (error) {
    console.error('Error registering:', error);
    throw error;
  }
};

export const signOut = async () => {
  try {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
  } catch (error) {
    console.error('Error signing out:', error);
    throw error;
  }
};

export const getUser = async () => {
  try {
    const { data, error } = await supabase.auth.getUser();
    if (error) throw error;
    return data.user;
  } catch (error) {
    console.error('Error getting user:', error);
    throw error;
  }
};

export const isAuthenticated = async () => {
  const { data: { user } } = await supabase.auth.getUser();
  return !!user;
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\store\index.ts
==================================================
import { create } from 'zustand';
import { AuthSlice, createAuthSlice } from './slices/authSlice';
import { CartSlice, createCartSlice } from './slices/cartSlice';
import { ProductSlice, createProductSlice } from './slices/productSlice';
import { OrderSlice, createOrderSlice } from './slices/orderSlice';

type StoreState = AuthSlice & CartSlice & ProductSlice & OrderSlice;

export const useStore = create<StoreState>()((...a) => ({
  ...createAuthSlice(...a),
  ...createCartSlice(...a),
  ...createProductSlice(...a),
  ...createOrderSlice(...a),
}));


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\store\slices\authSlice.ts
==================================================
import { StateCreator } from 'zustand';
import { User } from '@supabase/supabase-js';
import { supabase } from '../../utils/supabaseClient';

export interface AuthSlice {
  user: User | null;
  isLoading: boolean;
  error: string | null;
  setUser: (user: User | null) => void;
  signIn: (email: string, password: string) => Promise<void>;
  signUp: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
}

export const createAuthSlice: StateCreator<AuthSlice> = (set) => ({
  user: null,
  isLoading: false,
  error: null,
  setUser: (user) => set({ user }),
  signIn: async (email, password) => {
    set({ isLoading: true, error: null });
    try {
      const { data, error } = await supabase.auth.signInWithPassword({ email, password });
      if (error) throw error;
      set({ user: data.user, isLoading: false });
    } catch (error) {
      set({ error: (error as Error).message, isLoading: false });
    }
  },
  signUp: async (email, password) => {
    set({ isLoading: true, error: null });
    try {
      const { data, error } = await supabase.auth.signUp({ email, password });
      if (error) throw error;
      set({ user: data.user, isLoading: false });
    } catch (error) {
      set({ error: (error as Error).message, isLoading: false });
    }
  },
  signOut: async () => {
    set({ isLoading: true, error: null });
    try {
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      set({ user: null, isLoading: false });
    } catch (error) {
      set({ error: (error as Error).message, isLoading: false });
    }
  },
});


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\store\slices\cartSlice.ts
==================================================
import { StateCreator } from 'zustand';
import { CartItem } from '../../types/types';

export interface CartSlice {
  cart: CartItem[];
  addToCart: (item: CartItem) => void;
  removeFromCart: (productId: string) => void;
  clearCart: () => void;
}

export const createCartSlice: StateCreator<CartSlice> = (set) => ({
  cart: [],
  addToCart: (item) => set((state) => {
    const existingItemIndex = state.cart.findIndex(
      (cartItem) => cartItem.productId === item.productId && cartItem.size === item.size
    );
    
    if (existingItemIndex > -1) {
      const updatedCart = [...state.cart];
      updatedCart[existingItemIndex].quantity += item.quantity;
      localStorage.setItem('cartItems', JSON.stringify(updatedCart));
      return { cart: updatedCart };
    } else {
      const updatedCart = [...state.cart, item];
      localStorage.setItem('cartItems', JSON.stringify(updatedCart));
      return { cart: updatedCart };
    }
  }),
  removeFromCart: (productId) => set((state) => {
    const updatedCart = state.cart.filter((item) => item.productId !== productId);
    localStorage.setItem('cartItems', JSON.stringify(updatedCart));
    return { cart: updatedCart };
  }),
  clearCart: () => {
    localStorage.removeItem('cartItems');
    set({ cart: [] });
  },
});


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\store\slices\orderSlice.ts
==================================================
import { StateCreator } from 'zustand';
import { Order } from '../../types/types';

export interface OrderSlice {
  orders: Order[];
  setOrders: (orders: Order[]) => void;
}

export const createOrderSlice: StateCreator<OrderSlice> = (set) => ({
  orders: [],
  setOrders: (orders) => set({ orders }),
});


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\store\slices\productSlice.ts
==================================================
import { StateCreator } from 'zustand';
import { Product } from '../../types/types';

export interface ProductSlice {
  products: Product[];
  setProducts: (products: Product[]) => void;
}

export const createProductSlice: StateCreator<ProductSlice> = (set) => ({
  products: [],
  setProducts: (products) => set({ products }),
});


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\types\productDesigner.ts
==================================================
import { StaticImageData } from 'next/image';
import { fabric } from 'fabric';

export interface ProductView {
  [key: string]: string | StaticImageData;
}

export interface UploadedImages {
  [key: string]: fabric.Image[];
}

export interface ProductDesignerProps {
  productViews: ProductView;
  uploadedImages: UploadedImages;
  setUploadedImages: React.Dispatch<React.SetStateAction<UploadedImages>>;
  currentView: string;
  setCurrentView: React.Dispatch<React.SetStateAction<string>>;
  handleSaveDesign: () => Promise<void>;
  addToCartHandler: () => Promise<void>;
  onGoToCart: () => void;
}

export interface ProductViewSelectorProps {
  productViews: ProductView;
  currentView: string;
  setCurrentView: (view: string) => void;
}

export interface ActionButtonsProps {
  onSaveDesign: () => void;
  onAddToCart: () => void;
  onGoToCart: () => void;
}

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\types\types.ts
==================================================
// src/types/types.ts

export interface Product {
  id: string;
  name: string;
  description: string;
  image_url: string;
  price: number;
  view_1: string;
  view_2: string;
  view_3: string;
  view_4: string;
}

export interface Order {
  id: string;
  user_id: string;
  total_price: number;
  created_at: string;
  updated_at: string;
  status: 'pending' | 'processing' | 'completed' | 'cancelled';
}

export interface OrderItem {
  id: string;
  order_id: string;
  product_id: string;
  quantity: number;
  price: number;
  design_id: string;
  size: string;
}

export interface Design {
  id: string;
  user_id: string;
  product_id: string;
  created_at: string;
  view_1_images: DesignImage[];
  view_2_images: DesignImage[];
  view_3_images: DesignImage[];
  view_4_images: DesignImage[];
}

export interface DesignImage {
  src: string;
  left: number;
  top: number;
  scaleX: number;
  scaleY: number;
  angle: number;
}

export interface CartItem {
  designId: string | null;
  productId: string;
  quantity: number;
  size: 'S' | 'M' | 'L' | 'XL';
  price: number;
}

export type ProductView = 'view_1' | 'view_2' | 'view_3' | 'view_4';

export type ProductViews = {
  [K in ProductView]: string;
};

export interface ViewFiles {
  [key: string]: File | null;
}

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto_deprecated\src\utils\supabaseClient.js
==================================================
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey);

==================================================

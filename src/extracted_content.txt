Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\app\globals.css
==================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

input {
  color: black;
}

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\auth\LoginModal.tsx
==================================================
import React, { useState } from 'react';
import { signIn } from '../../services/authService';
import BaseModal from '../common/BaseModal';
import { useRouter } from 'next/router';
import { useStore } from '../../store';

interface LoginModalProps {
  show: boolean;
  onClose: () => void;
  onRegisterClick: () => void;
}

const LoginModal: React.FC<LoginModalProps> = ({ show, onClose, onRegisterClick }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();
  const setUser = useStore(state => state.setUser);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
  
    try {
      const { user, session } = await signIn(email, password);
      if (user) {
        setUser(user);
        onClose();
        console.log('Přihlášení úspěšné', user);
        router.push('/'); // nebo kam chcete uživatele přesměrovat po přihlášení
      }
    } catch (err) {
      console.error('Chyba při přihlašování:', err);
      setError('Nesprávné přihlašovací údaje nebo nastala chyba při přihlašování.');
    }
  };

  return (
    <BaseModal show={show} onClose={onClose} title="Přihlášení">
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <form onSubmit={handleLogin} className="space-y-4">
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="w-full px-3 py-2 border rounded text-black"
        />
        <input
          type="password"
          placeholder="Heslo"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="w-full px-3 py-2 border rounded text-black"
        />
        <button type="submit" className="w-full px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
          Přihlásit se
        </button>
      </form>
      <p className="mt-4">
        Nemáte účet? <button type="button" onClick={onRegisterClick} className="text-blue-500 hover:underline">Registrovat se</button>
      </p>
    </BaseModal>
  );
};

export default LoginModal;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\auth\RegisterModal.tsx
==================================================
import React, { useState } from 'react';
import { signUp } from '../../services/authService';
import BaseModal from '../common/BaseModal';

interface RegisterModalProps {
  show: boolean;
  onClose: () => void;
  onLoginClick: () => void;
}

const RegisterModal: React.FC<RegisterModalProps> = ({ show, onClose, onLoginClick }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
  
    try {
      await signUp(email, password);
      onClose();
    } catch (err) {
      setError('An error occurred while registering.');
    }
  };

  return (
    <BaseModal show={show} onClose={onClose} title="Register">
      {error && <p className="text-red-500 mb-4">{error}</p>}
      <form onSubmit={handleRegister} className="space-y-4">
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          className="w-full px-3 py-2 border rounded text-black"
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          className="w-full px-3 py-2 border rounded text-black"
        />
        <button type="submit" className="w-full px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600">
          Register
        </button>
      </form>
      <p className="mt-4">
        Already have an account? <button type="button" onClick={onLoginClick} className="text-blue-500 hover:underline">Login</button>
      </p>
    </BaseModal>
  );
};

export default RegisterModal;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\common\BaseModal.tsx
==================================================
import React, { ReactNode } from 'react';

interface BaseModalProps {
  show: boolean;
  onClose: () => void;
  title: string;
  children: ReactNode;
}

const BaseModal: React.FC<BaseModalProps> = ({ show, onClose, title, children }) => {
  if (!show) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center z-50">
      <div className="bg-white p-6 rounded-lg shadow-xl max-w-md w-full">
        <h2 className="text-2xl font-bold mb-4">{title}</h2>
        {children}
        <button
          className="mt-4 px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300"
          onClick={onClose}
        >
          Close
        </button>
      </div>
    </div>
  );
};

export default BaseModal;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\common\UserProfile.tsx
==================================================
// src/components/common/UserProfile.tsx
import React from 'react';
import { User } from '@supabase/supabase-js';
import BaseModal from './BaseModal';
import SavedDesigns from '../products/SavedDesigns';

interface UserProfileProps {
  show: boolean;
  user: User | null;
  onClose: () => void;
  onLogout: () => void;
}

const UserProfile: React.FC<UserProfileProps> = ({
  show,
  user,
  onClose,
  onLogout,
}) => {
  return (
    <BaseModal show={show} onClose={onClose} title="Profil uživatele">
      {user ? (
        <div className="space-y-4">
          <p className="text-lg">Email: <span className="font-semibold">{user.email}</span></p>
          {user.user_metadata && (
            <>
              <p className="text-lg">Jméno: <span className="font-semibold">{user.user_metadata.full_name}</span></p>
              <p className="text-lg">Telefon: <span className="font-semibold">{user.user_metadata.phone}</span></p>
            </>
          )}
          <button 
            onClick={onLogout}
            className="w-full py-2 px-4 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
          >
            Odhlásit se
          </button>
          <SavedDesigns user={user} />
        </div>
      ) : (
        <p className="text-lg text-gray-600">Načítání...</p>
      )}
    </BaseModal>
  );
};

export default UserProfile;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\EditProducts\AddProductForm.tsx
==================================================
import React from 'react';
import { Product, ViewFiles } from './types';
import ImageUpload from './ImageUpload';

interface AddProductFormProps {
  newProduct: Partial<Product>;
  onInputChange: (e: React.ChangeEvent<HTMLInputElement>, field: keyof Product) => void;
  onImageChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  onViewImageChange: (e: React.ChangeEvent<HTMLInputElement>, view: string) => void;
  onAddProduct: () => void;
}

const AddProductForm: React.FC<AddProductFormProps> = ({
  newProduct,
  onInputChange,
  onImageChange,
  onViewImageChange,
  onAddProduct
}) => (
  <div>
    <h2>Přidat nový produkt</h2>
    <input
      type="text"
      placeholder="Název"
      value={newProduct.name || ''}
      onChange={(e) => onInputChange(e, 'name')}
    />
    <input
      type="text"
      placeholder="Popis"
      value={newProduct.description || ''}
      onChange={(e) => onInputChange(e, 'description')}
    />
    <input
      type="number"
      placeholder="Cena"
      value={newProduct.price as number || ''}
      onChange={(e) => onInputChange(e, 'price')}
    />
    <ImageUpload onChange={onImageChange} label="Hlavní obrázek" />
    {['view_1', 'view_2', 'view_3', 'view_4'].map((view) => (
      <ImageUpload
        key={view}
        onChange={(e) => onViewImageChange(e, view)}
        label={`Obrázek pro ${view}`}
      />
    ))}
    <button onClick={onAddProduct}>Přidat Produkt</button>
  </div>
);

export default AddProductForm;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\EditProducts\ImageUpload.tsx
==================================================
import React from 'react';

interface ImageUploadProps {
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  label: string;
}

const ImageUpload: React.FC<ImageUploadProps> = ({ onChange, label }) => (
  <input
    type="file"
    onChange={onChange}
    aria-label={label}
  />
);

export default ImageUpload;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\EditProducts\ProductItem.tsx
==================================================
import React from 'react';
import { Product } from './types';

interface ProductItemProps {
  product: Product;
  onUpdate: (id: string, updatedProduct: Partial<Product>) => void;
}

const ProductItem: React.FC<ProductItemProps> = ({ product, onUpdate }) => (
  <div>
    <input
      type="text"
      value={product.name}
      onChange={(e) => onUpdate(product.id, { name: e.target.value })}
    />
    <input
      type="text"
      value={product.description}
      onChange={(e) => onUpdate(product.id, { description: e.target.value })}
    />
    <input
      type="number"
      value={product.price}
      onChange={(e) => onUpdate(product.id, { price: parseFloat(e.target.value) })}
    />
    <input
      type="text"
      value={product.image_url}
      onChange={(e) => onUpdate(product.id, { image_url: e.target.value })}
    />
    {['view_1', 'view_2', 'view_3', 'view_4'].map((view) => (
      <input
        key={view}
        type="text"
        value={product[view as keyof Product]}
        onChange={(e) => onUpdate(product.id, { [view]: e.target.value })}
      />
    ))}
  </div>
);

export default ProductItem;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\EditProducts\ProductList.tsx
==================================================
import React from 'react';
import { Product } from './types';
import ProductItem from './ProductItem';

interface ProductListProps {
  products: Product[];
  onUpdateProduct: (id: string, updatedProduct: Partial<Product>) => void;
}

const ProductList: React.FC<ProductListProps> = ({ products, onUpdateProduct }) => (
  <div>
    <h2>Seznam produktů</h2>
    {products.length > 0 ? (
      products.map((product) => (
        <ProductItem key={product.id} product={product} onUpdate={onUpdateProduct} />
      ))
    ) : (
      <p>Žádné produkty nebyly nalezeny.</p>
    )}
  </div>
);

export default ProductList;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\EditProducts\types.ts
==================================================
export interface Product {
    id: string;
    name: string;
    description: string;
    price: number;
    image_url: string;
    view_1: string;
    view_2: string;
    view_3: string;
    view_4: string;
}

export interface ViewFiles {
    [key: string]: File | null;
}

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\employee\EmployeeDashboard.tsx
==================================================
import Image from 'next/image';
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '../../utils/supabaseClient';
import { Order, OrderItem } from '../../types/types';
import CanvasComponent from '../products/CanvasComponent';
import useProductViews from '../../hooks/useProductViews';
import { loadDesign } from '../../services/designService';
import { fabric } from 'fabric';

const EmployeeDashboard: React.FC = () => {
  const router = useRouter();
  const [orders, setOrders] = useState<Order[]>([]);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);
  const [uploadedImages, setUploadedImages] = useState<{ [key: string]: fabric.Image[] }>({ view_1: [], view_2: [], view_3: [], view_4: [] });
  const [selectedProductId, setSelectedProductId] = useState<string | null>(null);
  const [currentView, setCurrentView] = useState('view_1');
  const [isEmployeeVerified, setIsEmployeeVerified] = useState(false);
  const productViews = useProductViews(selectedProductId || undefined);

  useEffect(() => {
    const checkEmployeeStatus = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      console.log('User data:', user);
      if (!user) {
        console.error('Uživatel není přihlášen');
        router.push('/employee/login');
        return;
      }
      if (!user.user_metadata.is_employee) {
        console.error('Uživatel není zaměstnanec');
        router.push('/');
        return;
      }
      console.log('Uživatel je zaměstnanec, načítám objednávky');
      setIsEmployeeVerified(true);
      fetchOrders();
    };

    checkEmployeeStatus();
  }, [router]);

  const fetchOrders = async () => {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setOrders(data || []);
    } catch (error) {
      console.error('Chyba při načítání objednávek:', error);
    }
  };

  const handleViewOrder = async (order: Order) => {
    setSelectedOrder(order);
    try {
      const { data, error } = await supabase
        .from('order_items')
        .select('*')
        .eq('order_id', order.id);

      if (error) throw error;
      setOrderItems(data || []);
    } catch (error) {
      console.error('Chyba při načítání položek objednávky:', error);
    }
  };

  const handleViewOrderItem = async (item: OrderItem) => {
    setSelectedProductId(item.product_id);
    if (item.design_id) {
      try {
        const { data: design, error } = await supabase
          .from('designs')
          .select('*')
          .eq('id', item.design_id)
          .single();

        if (error) throw error;

        if (design) {
          const loadedImages = await loadDesign(item.product_id, design);
          if (loadedImages) {
            setUploadedImages(loadedImages);
          }
        }
      } catch (error) {
        console.error('Chyba při načítání designu:', error);
      }
    }
  };

  if (!isEmployeeVerified) {
    return <div>Ověřování...</div>;
  }

  return (
    <div>
      <h2>Objednávky zákazníků</h2>
      {orders.length > 0 ? (
        <ul>
          {orders.map((order) => (
            <li key={order.id}>
              <p>ID objednávky: {order.id}</p>
              <p>Celková cena: {order.total_price}</p>
              <button onClick={() => handleViewOrder(order)}>Zobrazit objednávku</button>
            </li>
          ))}
        </ul>
      ) : (
        <p>Žádné objednávky nenalezeny</p>
      )}
      {selectedOrder && (
        <div>
          <h3>Náhled objednávky</h3>
          <ul>
            {orderItems.map((item) => (
              <li key={item.id}>
                <p>ID produktu: {item.product_id}</p>
                <p>Množství: {item.quantity}</p>
                <p>Cena: {item.price}</p>
                <button onClick={() => handleViewOrderItem(item)}>Zobrazit návrh</button>
              </li>
            ))}
          </ul>
          {selectedProductId && (
            <div>
              <div style={{ display: 'flex', gap: '10px', marginBottom: '20px' }}>
                {Object.entries(productViews).map(([key, value]) =>
                  value && (
                    <Image key={key}
                      src={value}
                      alt={`Náhled ${key}`}
                      width={100}
                      height={100}
                      style={{ cursor: 'pointer' }}
                      onClick={() => setCurrentView(key)}
                    />
                  )
                )}
              </div>
              <CanvasComponent
                uploadedImages={uploadedImages}
                currentView={currentView}
                productViews={productViews}
                setUploadedImages={setUploadedImages}
                readOnly={true}
              />
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default EmployeeDashboard;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\layout\Layout.tsx
==================================================
import React from 'react';
import Link from 'next/link';
import { useStore } from '../../store';
import { useRouter } from 'next/router';

const Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const user = useStore(state => state.user);
  const router = useRouter();
  const isDesignerPage = router.pathname.startsWith('/designer');

  return (
    <div className="min-h-screen flex flex-col">
      <nav className="bg-gray-800 text-white p-4">
        <div className="container mx-auto flex justify-between items-center">
          <Link href="/" className="text-xl font-bold">PrintPresto</Link>
          <div className="space-x-4">
            <Link href="/products" className="hover:text-gray-300">Produkty</Link>
            <Link href="/cart" className="hover:text-gray-300">Košík</Link>
            {user ? (
              <Link href="/profile" className="hover:text-gray-300">Profil</Link>
            ) : (
              <Link href="/login" className="hover:text-gray-300">Přihlásit se</Link>
            )}
          </div>
        </div>
      </nav>
      <main className={`flex-grow container mx-auto ${isDesignerPage ? '' : 'mt-4 p-4'}`}>
        {children}
      </main>
      <footer className="bg-gray-800 text-white p-4 mt-8">
        <div className="container mx-auto text-center">
          &copy; 2024 PrintPresto. Všechna práva vyhrazena.
        </div>
      </footer>
    </div>
  );
};

export default Layout;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\products\CanvasComponent.tsx
==================================================
import React, { useEffect, useRef } from 'react';
import { fabric } from 'fabric';

interface CanvasComponentProps {
  uploadedImages: { [key: string]: fabric.Image[] };
  currentView: string;
  productViews: { [key: string]: string };
  setUploadedImages: React.Dispatch<React.SetStateAction<{ [key: string]: fabric.Image[] }>>;
  readOnly: boolean;
}

const CanvasComponent: React.FC<CanvasComponentProps> = ({
  uploadedImages,
  currentView,
  productViews,
  setUploadedImages,
  readOnly,
}) => {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const [canvas, setCanvas] = React.useState<fabric.Canvas | null>(null);

  useEffect(() => {
    if (canvasRef.current && !canvas) {
      const newCanvas = new fabric.Canvas(canvasRef.current);
      setCanvas(newCanvas);
    }
  }, [canvas]);

  useEffect(() => {
    if (canvas && productViews && productViews[currentView]) {
      const imageUrl = productViews[currentView];
      canvas.clear();

      fabric.Image.fromURL(imageUrl, (imgObj) => {
        if (imgObj) {
          imgObj.selectable = false;
          canvas.add(imgObj);
          canvas.sendToBack(imgObj);

          const maxSize = 256; // Tailwind třída w-64 a h-48
          const scale = Math.min(maxSize / imgObj.width!, maxSize / imgObj.height!);
          imgObj.scale(scale);

          canvas.setDimensions({ width: maxSize, height: maxSize });

          imgObj.setCoords();
          canvas.renderAll();
        }
      });

      if (uploadedImages[currentView]) {
        uploadedImages[currentView].forEach(img => {
          if (!canvas.contains(img)) {
            img.selectable = !readOnly; // Set selectable to false if readOnly
            canvas.add(img);
            img.bringToFront();
            img.setCoords();
          }
        });
      }

      canvas.renderAll();
    }
  }, [canvas, productViews, currentView, uploadedImages, readOnly]);

  useEffect(() => {
    if (canvas && readOnly) {
      canvas.selection = false; // Disable multiple object selection
      canvas.forEachObject((obj) => {
        obj.selectable = false;
        obj.evented = false; // Disable object interaction
      });
      canvas.renderAll();
    }
  }, [canvas, readOnly]);

  const handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (readOnly) return;

    const file = event.target.files && event.target.files[0];
    if (file && canvas) {
      const reader = new FileReader();

      reader.onload = (fEvent) => {
        fabric.Image.fromURL(fEvent.target!.result as string, (img) => {
          const maxSize = 256; // Tailwind třída w-64 a h-48
          const scale = Math.min(maxSize / img.width!, maxSize / img.height!);
          img.scale(scale);

          img.selectable = true;
          canvas.add(img);
          img.bringToFront();
          img.setCoords();
          canvas.renderAll();

          setUploadedImages(prev => ({
            ...prev,
            [currentView]: [...prev[currentView], img]
          }));
        });
      };

      reader.readAsDataURL(file);
    }
  };

  const removeSelectedImages = () => {
    if (readOnly) return;

    if (!canvas) return;

    const activeObjects = canvas.getActiveObjects();
    if (activeObjects.length === 0) return;

    activeObjects.forEach(obj => canvas.remove(obj));
    canvas.discardActiveObject();
    canvas.requestRenderAll();

    const updatedImages = uploadedImages[currentView].filter(img => !activeObjects.includes(img));
    setUploadedImages({
      ...uploadedImages,
      [currentView]: updatedImages
    });
  };

  return (
    <div>
      <canvas ref={canvasRef} className="w-64 h-64" />
      {!readOnly && <input type="file" onChange={handleUpload} />}
      {!readOnly && <button onClick={removeSelectedImages}>Odstranit označené obrázky</button>}
    </div>
  );
};

export default CanvasComponent;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\components\products\SavedDesigns.tsx
==================================================
// src/components/products/SavedDesigns.tsx
import React, { useEffect, useState } from 'react';
import { supabase } from '../../utils/supabaseClient';
import { User } from '@supabase/supabase-js';
import { useRouter } from 'next/router';

interface SavedDesignsProps {
  user: User | null;
}

const SavedDesigns: React.FC<SavedDesignsProps> = ({ user }) => {
  const [savedDesigns, setSavedDesigns] = useState<any[]>([]);
  const router = useRouter();

  useEffect(() => {
    const fetchSavedDesigns = async () => {
      if (!user) return;

      const { data, error } = await supabase
        .from('designs')
        .select('*')
        .eq('user_id', user.id);

      if (error) {
        console.error('Chyba při načítání uložených návrhů:', error);
      } else {
        setSavedDesigns(data || []);
      }
    };

    fetchSavedDesigns();
  }, [user]);

  const handleDesignSelect = (productId: string, design: any) => {
    const designData = {
      view_1_images: design.view_1_images,
      view_2_images: design.view_2_images,
      view_3_images: design.view_3_images,
      view_4_images: design.view_4_images,
    };

    const encodedDesignData = encodeURIComponent(JSON.stringify(designData));
    router.push(`/designer/${productId}?designData=${encodedDesignData}`);
  };

  return (
    <div className="mt-6">
      <h2 className="text-xl font-semibold mb-4">Uložené návrhy</h2>
      {savedDesigns.length > 0 ? (
        <ul className="space-y-2">
          {savedDesigns.map((design) => (
            <li key={design.id}>
              <button 
                onClick={() => handleDesignSelect(design.product_id, design)}
                className="w-full py-2 px-4 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
              >
                Návrh pro produkt {design.product_id}
              </button>
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-gray-600">Žádné uložené návrhy</p>
      )}
    </div>
  );
};

export default SavedDesigns;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\hooks\useProductDesigner.ts
==================================================
// src/hooks/useProductDesigner.ts
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { fabric } from 'fabric';
import useUser from './useUser';
import useProductViews from './useProductViews';
import { loadDesign, saveDesign } from '../services/designService';
import { useStore } from '../store';
import { CartItem } from '../types/types';

export const useProductDesigner = () => {
  const router = useRouter();
  const { id, designData } = router.query;
  const productViews = useProductViews(id as string);
  const [uploadedImages, setUploadedImages] = useState<{ [key: string]: fabric.Image[] }>({ view_1: [], view_2: [], view_3: [], view_4: [] });
  const [currentView, setCurrentView] = useState<string>('view_1');
  const user = useUser();
  const addToCart = useStore(state => state.addToCart);

  useEffect(() => {
    if (designData) {
      const decodedDesignData = JSON.parse(decodeURIComponent(designData as string));
      handleDesignSelect(id as string, decodedDesignData);
    }
  }, [id, designData]);

  const handleSaveDesign = async () => {
    const designId = await saveDesign(user, id as string, uploadedImages);
    return designId;
  };

  const handleDesignSelect = async (productId: string, uploadedImagesData: any) => {
    const updatedImages = await loadDesign(productId, uploadedImagesData);
    if (updatedImages) {
      setUploadedImages(updatedImages);
    }
  };

  const addToCartHandler = async () => {
    const designId = await handleSaveDesign();

    const newItem: CartItem = {
      designId,
      productId: id as string,
      quantity: 1,
      size: 'M', // Default size, you might want to make this configurable
      price: 100, // Example price, should be fetched from product data
    };
    addToCart(newItem);
  };

  return {
    productViews,
    uploadedImages,
    setUploadedImages,
    currentView,
    setCurrentView,
    handleSaveDesign,
    addToCartHandler,
  };
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\hooks\useProductViews.tsx
==================================================
import { useEffect, useState } from 'react';
import { supabase } from '../utils/supabaseClient';

const useProductViews = (productId: string | string[] | undefined) => {
  const [productViews, setProductViews] = useState<{ [key: string]: string }>({ view_1: '', view_2: '', view_3: '', view_4: '' });

  useEffect(() => {
    const getProductViews = async () => {
      if (!productId) return;

      const { data, error } = await supabase
        .from('products')
        .select('view_1, view_2, view_3, view_4')
        .eq('id', productId)
        .single();

      if (error) {
        console.error('Chyba při načítání obrázků produktu:', error);
      } else if (data) {
        setProductViews({
          view_1: data.view_1,
          view_2: data.view_2,
          view_3: data.view_3,
          view_4: data.view_4
        });
      }
    };

    getProductViews();
  }, [productId]);

  return productViews;
};

export default useProductViews;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\hooks\useUser.tsx
==================================================
import { useEffect, useState } from 'react';
import { supabase } from '../utils/supabaseClient';
import { User } from '@supabase/supabase-js';
import { getUser } from '../services/authService';

const useUser = () => {
  const [user, setUser] = useState<User | null>(null);

  useEffect(() => {
    const fetchUser = async () => {
      try {
        const user = await getUser();
        setUser(user);
      } catch (error) {
        console.error('Error fetching user:', error);
      }
    };
  
    fetchUser();
  }, []); 

  return user;
};

export default useUser;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\cart.tsx
==================================================
import React, { useEffect } from 'react';
import { useStore } from '../store';
import { supabase } from '../utils/supabaseClient';
import { CartItem, Order } from '../types/types';

const Cart: React.FC = () => {
  const { cart, user, removeFromCart } = useStore();

  useEffect(() => {
    const savedCartItems = localStorage.getItem('cartItems');
    if (savedCartItems) {
      const parsedCartItems = JSON.parse(savedCartItems);
      useStore.setState({ cart: parsedCartItems });
    }
  }, []);

  const handleQuantityChange = (index: number, quantity: number) => {
    const updatedCart = [...cart];
    updatedCart[index].quantity = quantity;
    useStore.setState({ cart: updatedCart });
    localStorage.setItem('cartItems', JSON.stringify(updatedCart));
  };

  const handleSizeChange = (index: number, size: string) => {
    const updatedCart = [...cart];
    updatedCart[index].size = size;
    useStore.setState({ cart: updatedCart });
    localStorage.setItem('cartItems', JSON.stringify(updatedCart));
  };

  const handleCheckout = async () => {
    const { data: { user } } = await supabase.auth.getUser();
    if (!user) {
      console.error('Uživatel není přihlášen');
      return;
    }

    const total_price = cart.reduce((total, item) => total + item.price * item.quantity, 0);

    try {
      const { data: order, error: orderError } = await supabase
        .from('orders')
        .insert({ user_id: user.id, total_price })
        .select()
        .single();

      if (orderError) throw orderError;

      const orderItems = cart.map(item => ({
        order_id: (order as Order).id,
        product_id: item.productId,
        quantity: item.quantity,
        price: item.price,
        design_id: item.designId,
      }));

      const { error: orderItemsError } = await supabase
        .from('order_items')
        .insert(orderItems);

      if (orderItemsError) throw orderItemsError;

      console.log('Objednávka byla úspěšně vytvořena');
      
      // Vyčištění košíku po úspěšné objednávce
      useStore.setState({ cart: [] });
      localStorage.removeItem('cartItems');
    } catch (error) {
      console.error('Chyba při vytváření objednávky:', error);
    }
  };

  return (
    <div>
      <h2>Košík</h2>
      {cart.length > 0 ? (
        <>
          <ul>
            {cart.map((item: CartItem, index: number) => (
              <li key={index}>
                <p>Produkt ID: {item.productId}</p>
                <p>Design ID: {item.designId}</p>
                <label>
                  Velikost:
                  <select 
                    value={item.size} 
                    onChange={(e) => handleSizeChange(index, e.target.value)}
                  >
                    <option value="S">S</option>
                    <option value="M">M</option>
                    <option value="L">L</option>
                    <option value="XL">XL</option>
                  </select>
                </label>
                <label>
                  Počet:
                  <input
                    type="number"
                    value={item.quantity}
                    onChange={(e) => handleQuantityChange(index, parseInt(e.target.value))}
                    min="1"
                  />
                </label>
                <p>Cena: {item.price}</p>
                <button onClick={() => removeFromCart(item.productId)}>Odstranit</button>
              </li>
            ))}
          </ul>
          <button onClick={handleCheckout}>Dokončit nákup</button>
        </>
      ) : (
        <p>Košík je prázdný</p>
      )}
    </div>
  );
};

export default Cart;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\editproducts.tsx
==================================================
import React, { useState, useEffect } from 'react';
import { supabase } from '../utils/supabaseClient';
import { Product, ViewFiles } from '../components/EditProducts/types';
import AddProductForm from '../components/EditProducts/AddProductForm';
import ProductList from '../components/EditProducts/ProductList';

const EditProducts: React.FC = () => {
  const [newProduct, setNewProduct] = useState<Partial<Product>>({});
  const [products, setProducts] = useState<Product[]>([]);
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [viewFiles, setViewFiles] = useState<ViewFiles>({
    view_1: null,
    view_2: null,
    view_3: null,
    view_4: null,
  });

  useEffect(() => {
    fetchProducts();
  }, []);

  const fetchProducts = async () => {
    const { data, error } = await supabase.from('products').select('*');
    if (error) {
      console.error('Chyba při načítání produktů:', error);
    } else {
      setProducts(data);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>, field: keyof Product) => {
    const value = field === 'price' ? parseFloat(e.target.value) : e.target.value;
    setNewProduct({ ...newProduct, [field]: value });
  };

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      setImageFile(e.target.files[0]);
    }
  };

  const handleViewImageChange = (e: React.ChangeEvent<HTMLInputElement>, view: string) => {
    if (e.target.files && e.target.files[0]) {
      setViewFiles({ ...viewFiles, [view]: e.target.files[0] });
    }
  };

  const uploadImage = async (file: File) => {
    const fileName = `${Date.now()}_${file.name}`;
    const { data: uploadData, error: uploadError } = await supabase.storage.from('products').upload(fileName, file);
    if (uploadError) {
      console.error('Chyba při nahrávání obrázku:', uploadError);
      return null;
    }
    const { data: urlData } = await supabase.storage.from('products').getPublicUrl(fileName);
    if (!urlData) {
      console.error('Chyba při získávání veřejného URL');
      return null;
    }
    return urlData.publicUrl;
  };

  const uploadViewImage = async (file: File, view: string) => {
    const fileName = `${Date.now()}_${view}_${file.name}`;
    const { data: uploadData, error: uploadError } = await supabase.storage.from('product_views').upload(fileName, file);
    if (uploadError) {
      console.error(`Chyba při nahrávání obrázku pro ${view}:`, uploadError);
      return null;
    }
    const { data: urlData } = await supabase.storage.from('product_views').getPublicUrl(fileName);
    if (!urlData) {
      console.error(`Chyba při získávání veřejného URL pro ${view}`);
      return null;
    }
    return urlData.publicUrl;
  };

  const handleAddProduct = async () => {
    let imageUrl: string = '';
    if (imageFile) {
      const uploadedImageUrl = await uploadImage(imageFile);
      if (uploadedImageUrl) {
        imageUrl = uploadedImageUrl;
      }
    }

    const viewUrls: { [key: string]: string } = {};
    for (const view in viewFiles) {
      if (viewFiles[view]) {
        const uploadedViewUrl = await uploadViewImage(viewFiles[view]!, view);
        if (uploadedViewUrl) {
          viewUrls[view] = uploadedViewUrl;
        }
      }
    }

    const productToAdd = { ...newProduct, image_url: imageUrl, ...viewUrls };
    const { data, error } = await supabase.from('products').insert([productToAdd]).select();
    if (error) {
      console.error('Chyba při přidávání produktu:', error);
    } else {
      setProducts([...products, data[0]]);
      setNewProduct({});
      setImageFile(null);
      setViewFiles({ view_1: null, view_2: null, view_3: null, view_4: null });
    }
  };

  const handleUpdateProduct = async (id: string, updatedProduct: Partial<Product>) => {
    const { data, error } = await supabase.from('products').update(updatedProduct).eq('id', id).select();
    if (error) {
      console.error('Chyba při aktualizaci produktu:', error);
    } else {
      setProducts(products.map(product => (product.id === id ? data[0] : product)));
    }
  };

  return (
    <div>
      <h1>Upravit Produkty</h1>
      <AddProductForm
        newProduct={newProduct}
        onInputChange={handleInputChange}
        onImageChange={handleImageChange}
        onViewImageChange={handleViewImageChange}
        onAddProduct={handleAddProduct}
      />
      <ProductList products={products} onUpdateProduct={handleUpdateProduct} />
    </div>
  );
};

export default EditProducts;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\index.tsx
==================================================
// src/pages/index.tsx
import React from 'react';
import Link from 'next/link';

const Home: React.FC = () => {
  return (
    <div style={{ height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column' }}>
      <h1>Vítejte na naší stránce</h1>
      <Link href="/products" passHref>
        <button style={{ padding: '10px 20px', fontSize: '1rem', cursor: 'pointer' }}>Začít</button>
      </Link>
    </div>
  );
};

export default Home;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\login.tsx
==================================================
import React, { useState } from 'react';
import { signIn } from '../services/authService';
import { useRouter } from 'next/router';
import Link from 'next/link';

const Login: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
  
    try {
      const { user } = await signIn(email, password);
      if (user) {
        router.push('/profile');
      }
    } catch (err) {
      setError('Nesprávné přihlašovací údaje nebo nastala chyba při přihlašování.');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">Přihlášení</h2>
        {error && <p className="text-red-500 text-center">{error}</p>}
        <form onSubmit={handleLogin} className="mt-8 space-y-6">
          <input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
          />
          <input
            type="password"
            placeholder="Heslo"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
          />
          <button type="submit" className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Přihlásit se
          </button>
        </form>
        <p className="mt-2 text-center text-sm text-gray-600">
          Nemáte účet? <Link href="/register" className="font-medium text-indigo-600 hover:text-indigo-500">Registrovat se</Link>
        </p>
      </div>
    </div>
  );
};

export default Login;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\products.tsx
==================================================
import React, { useEffect } from 'react';
import Link from 'next/link';
import Image from 'next/image';
import { useStore } from '../store';
import { supabase } from '../utils/supabaseClient';
import { Product } from '../types/types';

const Products: React.FC = () => {
  const products = useStore((state) => state.products);
  const setProducts = useStore((state) => state.setProducts);

  useEffect(() => {
    const fetchProducts = async () => {
      const { data, error } = await supabase.from('products').select('*');
      if (error) {
        console.error('Chyba při načítání produktů:', error);
      } else {
        setProducts(data || []);
      }
    };

    fetchProducts();
  }, [setProducts]);

  console.log('Products:', products); // Pro debugging

  if (products.length === 0) {
    return <div>Načítání produktů...</div>;
  }

  return (
    <div>
      <h1>Naše Produkty</h1>
      <div>
        {products.map((product: Product) => (
          <div key={product.id} style={{ margin: '10px' }}>
            <Link href={`/designer/${product.id}`} passHref>
              <div>
                <Image 
                  src={product.image_url} 
                  alt={product.name} 
                  width={100} 
                  height={100} 
                  style={{ objectFit: 'cover' }} 
                />
                <button>{product.name}</button>
              </div>
            </Link>
          </div>
        ))}
      </div>
    </div>
  );
};

export default Products;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\profile.tsx
==================================================
import React from 'react';
import { useRouter } from 'next/router';
import { signOut } from '../services/authService';
import { useStore } from '../store';
import SavedDesigns from '../components/products/SavedDesigns';

const Profile: React.FC = () => {
  const router = useRouter();
  const user = useStore(state => state.user);
  const setUser = useStore(state => state.setUser);

  const handleLogout = async () => {
    try {
      await signOut();
      setUser(null);
      router.push('/');
    } catch (error) {
      console.error('Error logging out:', error);
    }
  };

  if (!user) {
    return <div>Načítání...</div>;
  }

  return (
    <div className="container mx-auto mt-10 p-5">
      <h1 className="text-2xl font-bold mb-5">Profil uživatele</h1>
      <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <p className="mb-4"><strong>Email:</strong> {user.email}</p>
        {user.user_metadata && (
          <>
            <p className="mb-4"><strong>Jméno:</strong> {user.user_metadata.full_name}</p>
            <p className="mb-4"><strong>Telefon:</strong> {user.user_metadata.phone}</p>
          </>
        )}
        <button 
          onClick={handleLogout}
          className="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
        >
          Odhlásit se
        </button>
      </div>
      <SavedDesigns user={user} />
    </div>
  );
};

export default Profile;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\register.tsx
==================================================
import React, { useState } from 'react';
import { signUp } from '../services/authService';
import { useRouter } from 'next/router';
import Link from 'next/link';

const Register: React.FC = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');
  
    try {
      await signUp(email, password);
      router.push('/login');
    } catch (err) {
      setError('An error occurred while registering.');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">Registrace</h2>
        {error && <p className="text-red-500 text-center">{error}</p>}
        <form onSubmit={handleRegister} className="mt-8 space-y-6">
          <input
            type="email"
            placeholder="Email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
          />
          <input
            type="password"
            placeholder="Heslo"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
          />
          <button type="submit" className="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
            Registrovat se
          </button>
        </form>
        <p className="mt-2 text-center text-sm text-gray-600">
          Již máte účet? <Link href="/login" className="font-medium text-indigo-600 hover:text-indigo-500">Přihlásit se</Link>
        </p>
      </div>
    </div>
  );
};

export default Register;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\_app.tsx
==================================================
import '../app/globals.css'
import type { AppProps } from 'next/app'
import Layout from '../components/layout/Layout'
import React, { useEffect } from 'react';
import { useRouter } from 'next/router';
import { useStore } from '../store';
import { getUser } from '../services/authService';

export default function App({ Component, pageProps }: AppProps) {
  const router = useRouter();
  const setUser = useStore(state => state.setUser);

  useEffect(() => {
    const checkUser = async () => {
      const user = await getUser();
      setUser(user);

      if (!user && !['/', '/login', '/register'].includes(router.pathname)) {
        router.push('/login');
      }
    };

    checkUser();
  }, []);

  return (
    <Layout>
      <Component {...pageProps} />
    </Layout>
  );
}

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\designer\[id].tsx
==================================================
// src/pages/designer/[id].tsx
import Image from 'next/image';
import React from 'react';
import { useRouter } from 'next/router';
import Layout from '../../components/layout/Layout';
import CanvasComponent from '../../components/products/CanvasComponent';
import { useProductDesigner } from '../../hooks/useProductDesigner';

const ProductDesigner: React.FC = () => {
  const router = useRouter();
  const {
    productViews,
    uploadedImages,
    setUploadedImages,
    currentView,
    setCurrentView,
    handleSaveDesign,
    addToCartHandler,
  } = useProductDesigner();

  return (
    <Layout>
      <div className="space-y-6">
        <h1 className="text-2xl font-bold">Designér produktů</h1>
        <div className="flex gap-4 flex-wrap">
          {Object.entries(productViews).map(([key, value]) =>
            value && (
              <Image 
                key={key}
                src={value}
                alt={`Náhled ${key}`}
                width={100}
                height={100}
                className="cursor-pointer"
                onClick={() => setCurrentView(key)}
              />
            )
          )}
        </div>
        <CanvasComponent
          uploadedImages={uploadedImages}
          currentView={currentView}
          productViews={productViews}
          setUploadedImages={setUploadedImages}
          readOnly={false}
        />
        <div className="flex gap-4">
          <button 
            onClick={handleSaveDesign}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
          >
            Uložit návrh
          </button>
          <button 
            onClick={addToCartHandler}
            className="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
          >
            Přidat do košíku
          </button>
          <button 
            onClick={() => router.push('/cart')}
            className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
          >
            Přejít do košíku
          </button>
        </div>
      </div>
    </Layout>
  );
};

export default ProductDesigner;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\employee\dashboard.tsx
==================================================
import Image from 'next/image';
import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '../../utils/supabaseClient';
import { Order, OrderItem } from '../../types/types';
import CanvasComponent from '../../components/products/CanvasComponent';
import useProductViews from '../../hooks/useProductViews';
import { loadDesign } from '../../services/designService';
import { fabric } from 'fabric';

const EmployeeDashboard: React.FC = () => {
  const router = useRouter();
  const [orders, setOrders] = useState<Order[]>([]);
  const [selectedOrder, setSelectedOrder] = useState<Order | null>(null);
  const [orderItems, setOrderItems] = useState<OrderItem[]>([]);
  const [uploadedImages, setUploadedImages] = useState<{ [key: string]: fabric.Image[] }>({ view_1: [], view_2: [], view_3: [], view_4: [] });
  const [selectedProductId, setSelectedProductId] = useState<string | null>(null);
  const [currentView, setCurrentView] = useState('view_1');
  const [isEmployeeVerified, setIsEmployeeVerified] = useState(false);
  const productViews = useProductViews(selectedProductId || undefined);

  useEffect(() => {
    const checkEmployeeStatus = async () => {
      const { data: { user } } = await supabase.auth.getUser();
      console.log('User data:', user);
      if (!user) {
        console.error('Uživatel není přihlášen');
        router.push('/employee/login');
        return;
      }
      if (!user.user_metadata.is_employee) {
        console.error('Uživatel není zaměstnanec');
        router.push('/');
        return;
      }
      console.log('Uživatel je zaměstnanec, načítám objednávky');
      setIsEmployeeVerified(true);
      fetchOrders();
    };

    checkEmployeeStatus();
  }, [router]);

  const fetchOrders = async () => {
    try {
      const { data, error } = await supabase
        .from('orders')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) throw error;
      setOrders(data || []);
    } catch (error) {
      console.error('Chyba při načítání objednávek:', error);
    }
  };

  const handleViewOrder = async (order: Order) => {
    setSelectedOrder(order);
    try {
      const { data, error } = await supabase
        .from('order_items')
        .select('*')
        .eq('order_id', order.id);

      if (error) throw error;
      setOrderItems(data || []);
    } catch (error) {
      console.error('Chyba při načítání položek objednávky:', error);
    }
  };

  const handleViewOrderItem = async (item: OrderItem) => {
    setSelectedProductId(item.product_id);
    if (item.design_id) {
      try {
        const { data: design, error } = await supabase
          .from('designs')
          .select('*')
          .eq('id', item.design_id)
          .single();

        if (error) throw error;

        if (design) {
          const loadedImages = await loadDesign(item.product_id, design);
          if (loadedImages) {
            setUploadedImages(loadedImages);
          }
        }
      } catch (error) {
        console.error('Chyba při načítání designu:', error);
      }
    }
  };

  if (!isEmployeeVerified) {
    return <div>Ověřování...</div>;
  }

  return (
    <div>
      <h2>Objednávky zákazníků</h2>
      {orders.length > 0 ? (
        <ul>
          {orders.map((order) => (
            <li key={order.id}>
              <p>ID objednávky: {order.id}</p>
              <p>Celková cena: {order.total_price}</p>
              <button onClick={() => handleViewOrder(order)}>Zobrazit objednávku</button>
            </li>
          ))}
        </ul>
      ) : (
        <p>Žádné objednávky nenalezeny</p>
      )}
      {selectedOrder && (
        <div>
          <h3>Náhled objednávky</h3>
          <ul>
            {orderItems.map((item) => (
              <li key={item.id}>
                <p>ID produktu: {item.product_id}</p>
                <p>Množství: {item.quantity}</p>
                <p>Cena: {item.price}</p>
                <button onClick={() => handleViewOrderItem(item)}>Zobrazit návrh</button>
              </li>
            ))}
          </ul>
          {selectedProductId && (
            <div>
              <div style={{ display: 'flex', gap: '10px', marginBottom: '20px' }}>
                {Object.entries(productViews).map(([key, value]) =>
                  value && (
                    <Image key={key}
                      src={value}
                      alt={`Náhled ${key}`}
                      width={100}
                      height={100}
                      style={{ cursor: 'pointer' }}
                      onClick={() => setCurrentView(key)}
                    />
                  )
                )}
              </div>
              <CanvasComponent
                uploadedImages={uploadedImages}
                currentView={currentView}
                productViews={productViews}
                setUploadedImages={setUploadedImages}
                readOnly={true}
              />
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default EmployeeDashboard;


==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\pages\employee\login.tsx
==================================================
import React, { useState } from 'react';
import { supabase } from '../../utils/supabaseClient';

const EmployeeLogin = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    try {
      const { data, error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });

      if (error) throw error;

      if (data.user) {
        const { error: updateError } = await supabase.auth.updateUser({
          data: { is_employee: true }
        });

        if (updateError) {
          console.error('Error updating user metadata:', updateError);
          setError('Error verifying employee');
        } else {
          console.log('Employee login successful');
          window.location.href = '/employee/dashboard';
        }
      }
    } catch (err) {
      console.error('Error logging in:', err);
      setError('Error logging in');
    }
  };

  return (
    <div style={{
      backgroundColor: 'black',
      color: 'white',
      minHeight: '100vh',
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'center',
      alignItems: 'center',
    }}>
      <h2>Employee Login</h2>
      {error && <p style={{ color: 'red' }}>{error}</p>}
      <form onSubmit={handleLogin} style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          style={{ padding: '5px' }}
        />
        <input
          type="password"
          placeholder="Password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          style={{ padding: '5px' }}
        />
        <button type="submit" style={{ padding: '5px', backgroundColor: 'white', color: 'black' }}>Login</button>
      </form>
    </div>
  );
};

export default EmployeeLogin;

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\services\authService.ts
==================================================
import { supabase } from '../utils/supabaseClient';

export const signIn = async (email: string, password: string) => {
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password,
    });

    if (error) throw error;

    return { user: data.user, session: data.session };
  } catch (error) {
    console.error('Error logging in:', error);
    throw error;
  }
};

export const signUp = async (email: string, password: string) => {
  try {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
    });

    if (error) throw error;

    return { user: data.user, session: data.session };
  } catch (error) {
    console.error('Error registering:', error);
    throw error;
  }
};

export const signOut = async () => {
  try {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
  } catch (error) {
    console.error('Error signing out:', error);
    throw error;
  }
};

export const getUser = async () => {
  try {
    const { data, error } = await supabase.auth.getUser();
    if (error) throw error;
    return data.user;
  } catch (error) {
    console.error('Error getting user:', error);
    throw error;
  }
};

export const isAuthenticated = async () => {
  const { data: { user } } = await supabase.auth.getUser();
  return !!user;
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\services\designService.ts
==================================================
import { supabase } from '../utils/supabaseClient';
import { fabric } from 'fabric';

function mapImages(images: fabric.Image[]) {
  return images.map(img => ({
    ...img.toObject(),
    left: img.left,
    top: img.top,
    scaleX: img.scaleX,
    scaleY: img.scaleY,
    angle: img.angle
  }));
}

async function loadImages(imagesData: any) {
  if (!imagesData) return [];
  console.log('Loading images:', imagesData);
  return await Promise.all(imagesData.map((imgData: any) =>
    new Promise<fabric.Image>((resolve) => {
      fabric.Image.fromURL(imgData.src, (img) => {
        console.log('Loaded image:', img);
        img.set({
          left: imgData.left,
          top: imgData.top,
          scaleX: imgData.scaleX,
          scaleY: imgData.scaleY,
          angle: imgData.angle,
        });
        resolve(img);
      });
    })
  ));
}

export const saveDesign = async (user: any, id: string | string[] | undefined, uploadedImages: { [key: string]: fabric.Image[] }) => {
  if (!user) {
    console.error('Uživatel není přihlášen');
    return null;
  }

  const designData = {
    user_id: user.id,
    product_id: id,
    view_1_images: mapImages(uploadedImages.view_1),
    view_2_images: mapImages(uploadedImages.view_2),
    view_3_images: mapImages(uploadedImages.view_3),
    view_4_images: mapImages(uploadedImages.view_4)
  };

  try {
    const { data, error } = await supabase.from('designs').insert(designData).select().single();

    if (error) {
      console.error('Chyba při ukládání návrhu:', error);
      return null;
    } else {
      console.log('Návrh byl úspěšně uložen');
      return data.id;
    }
  } catch (error) {
    console.error('Neočekávaná chyba při ukládání návrhu:', error);
    return null;
  }
};

export const loadDesign = async (productId: string, design: any) => {
  try {
    const { data: productData, error } = await supabase
      .from('products')
      .select('view_1, view_2, view_3, view_4')
      .eq('id', productId)
      .single();

    if (error) throw error;

    if (productData) {
      const updatedImages = {
        view_1: await loadImages(design.view_1_images),
        view_2: await loadImages(design.view_2_images),
        view_3: await loadImages(design.view_3_images),
        view_4: await loadImages(design.view_4_images),
      };

      console.log('Loaded images:', updatedImages);

      return updatedImages;
    }

    return null;
  } catch (error) {
    console.error('Chyba při načítání designu:', error);
    return null;
  }
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\store\index.ts
==================================================
// src/store/index.ts
import { create } from 'zustand'
import { User } from '@supabase/supabase-js'
import { CartItem, Product, Order } from '../types/types'

interface AppState {
  user: User | null
  cart: CartItem[]
  products: Product[]
  orders: Order[]
  setUser: (user: User | null) => void
  addToCart: (item: CartItem) => void
  removeFromCart: (productId: string) => void
  setProducts: (products: Product[]) => void
  setOrders: (orders: Order[]) => void
  clearCart: () => void
}

export const useStore = create<AppState>((set) => ({
  user: null,
  cart: [],
  products: [],
  orders: [],
  setUser: (user) => set({ user }),
  addToCart: (item) => set((state) => {
    const existingItemIndex = state.cart.findIndex(
      (cartItem) => cartItem.productId === item.productId && cartItem.size === item.size
    );
    
    if (existingItemIndex > -1) {
      const updatedCart = [...state.cart];
      updatedCart[existingItemIndex].quantity += item.quantity;
      localStorage.setItem('cartItems', JSON.stringify(updatedCart));
      return { cart: updatedCart };
    } else {
      const updatedCart = [...state.cart, item];
      localStorage.setItem('cartItems', JSON.stringify(updatedCart));
      return { cart: updatedCart };
    }
  }),
  removeFromCart: (productId) => set((state) => {
    const updatedCart = state.cart.filter((item) => item.productId !== productId);
    localStorage.setItem('cartItems', JSON.stringify(updatedCart));
    return { cart: updatedCart };
  }),
  setProducts: (products) => set({ products }),
  setOrders: (orders) => set({ orders }),
  clearCart: () => set({ cart: [] }),
}))

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\types\types.ts
==================================================
// src/types/types.ts

export interface Product {
  id: string;
  name: string;
  description: string;
  image_url: string;
  price: number;
  view_1: string;
  view_2: string;
  view_3: string;
  view_4: string;
}

export interface Order {
  id: string;
  user_id: string;
  total_price: number;
  created_at: string;
  updated_at: string;
  status: 'pending' | 'processing' | 'completed' | 'cancelled';
}

export interface OrderItem {
  id: string;
  order_id: string;
  product_id: string;
  quantity: number;
  price: number;
  design_id: string;
  size: string;
}

export interface Design {
  id: string;
  user_id: string;
  product_id: string;
  created_at: string;
  view_1_images: DesignImage[];
  view_2_images: DesignImage[];
  view_3_images: DesignImage[];
  view_4_images: DesignImage[];
}

export interface DesignImage {
  src: string;
  left: number;
  top: number;
  scaleX: number;
  scaleY: number;
  angle: number;
}

export interface CartItem {
  designId: string | null;
  productId: string;
  quantity: number;
  size: 'S' | 'M' | 'L' | 'XL';
  price: number;
}

export type ProductView = 'view_1' | 'view_2' | 'view_3' | 'view_4';

export type ProductViews = {
  [K in ProductView]: string;
};

==================================================

Obsah souboru: c:\Users\thanh\Downloads\Programy\printpresto\src\utils\supabaseClient.js
==================================================
// utils/supabaseClient.js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://jpzkldagjsnbhrqkwvtl.supabase.co';
const supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpwemtsZGFnanNuYmhycWt3dnRsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MDE5NTIxNDksImV4cCI6MjAxNzUyODE0OX0.w7CcaoTxw-YjbvuMcyc5o8u2O7bCLAT_Q7zfZMlX42c';

export const supabase = createClient(supabaseUrl, supabaseAnonKey);


==================================================
